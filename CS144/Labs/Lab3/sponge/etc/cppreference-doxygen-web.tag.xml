<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<tagfile>
  <compound kind="namespace">
    <name>std</name>
    <filename></filename>
    <class kind="class">std::is_function</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_and_explicit</name>
      <anchorfile>cpp/atomic/atomic_fetch_sub</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_xor_explicit</name>
      <anchorfile>cpp/atomic/atomic_fetch_xor</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_unexpected</name>
      <anchorfile>cpp/error/set_unexpected</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::input_iterator_tag</class>
    <class kind="class">std::logical_and</class>
    <class kind="class">std::is_integral</class>
    <class kind="class">std::money_get</class>
    <member kind="function">
      <type>T</type>
      <name>fputs</name>
      <anchorfile>cpp/io/c/fputs</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ofstream</class>
    <class kind="class">std::ratio_subtract</class>
    <member kind="function">
      <type>T</type>
      <name>modf</name>
      <anchorfile>cpp/numeric/math/modf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::size_t</class>
    <member kind="function">
      <type>T</type>
      <name>not2</name>
      <anchorfile>cpp/utility/functional/not2</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strlen</name>
      <anchorfile>cpp/string/byte/strlen</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exp2</name>
      <anchorfile>cpp/numeric/math/exp2</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ctype_byname</class>
    <class kind="class">std::wcout</class>
    <member kind="function">
      <type>T</type>
      <name>setiosflags</name>
      <anchorfile>cpp/io/manip/setiosflags</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>adjacent_difference</name>
      <anchorfile>cpp/algorithm/adjacent_difference</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cos</name>
      <anchorfile>cpp/numeric/math/cos</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fwscanf</name>
      <anchorfile>cpp/io/c/fwscanf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_init</name>
      <anchorfile>cpp/atomic/atomic_init</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::fstream</class>
    <class kind="class">std::valarray</class>
    <class kind="class">std::ratio_greater_equal</class>
    <member kind="function">
      <type>T</type>
      <name>forward_as_tuple</name>
      <anchorfile>cpp/utility/tuple/forward_as_tuple</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::remove_extent</class>
    <class kind="class">std::ratio_greater</class>
    <member kind="function">
      <type>T</type>
      <name>abort</name>
      <anchorfile>cpp/utility/program/abort</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsncmp</name>
      <anchorfile>cpp/string/wide/wcsncmp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::intptr_t</class>
    <class kind="class">std::regex_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>set_intersection</name>
      <anchorfile>cpp/algorithm/set_intersection</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::lock_guard</class>
    <class kind="class">std::wbuffer_convert</class>
    <class kind="class">std::modulus</class>
    <class kind="class">std::ratio_divide</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_signal_fence</name>
      <anchorfile>cpp/atomic/atomic_signal_fence</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>llabs</name>
      <anchorfile>cpp/numeric/math/abs</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_move_iterator</name>
      <anchorfile>cpp/iterator/make_move_iterator</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ostreambuf_iterator</class>
    <class kind="class">std::dynarray</class>
    <class kind="class">std::is_nothrow_move_constructible</class>
    <class kind="class">std::vector</class>
    <member kind="function">
      <type>T</type>
      <name>scanf</name>
      <anchorfile>cpp/io/c/fscanf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::match_results</class>
    <class kind="class">std::back_insert_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>nextafter</name>
      <anchorfile>cpp/numeric/math/nextafter</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::iterator</class>
    <class kind="class">std::int8_t</class>
    <member kind="function">
      <type>T</type>
      <name>stol</name>
      <anchorfile>cpp/string/basic_string/stol</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strcspn</name>
      <anchorfile>cpp/string/byte/strcspn</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ungetwc</name>
      <anchorfile>cpp/io/c/ungetwc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transform</name>
      <anchorfile>cpp/algorithm/transform</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::student_t_distribution</class>
    <class kind="class">std::mt19937_64</class>
    <class kind="class">std::runtime_error</class>
    <member kind="function">
      <type>T</type>
      <name>putc</name>
      <anchorfile>cpp/io/c/fputc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswdigit</name>
      <anchorfile>cpp/string/wide/iswdigit</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ranlux24_base</class>
    <member kind="function">
      <type>T</type>
      <name>rint</name>
      <anchorfile>cpp/numeric/math/rint</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::allocator_traits</class>
    <member kind="function">
      <type>T</type>
      <name>memset</name>
      <anchorfile>cpp/string/byte/memset</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isgraph</name>
      <anchorfile>cpp/string/byte/isgraph</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt</class>
    <class kind="class">std::ratio_less_equal</class>
    <member kind="function">
      <type>T</type>
      <name>replace_copy_if</name>
      <anchorfile>cpp/algorithm/replace_copy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>scalbn</name>
      <anchorfile>cpp/numeric/math/scalbn</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::condition_variable_any</class>
    <member kind="function">
      <type>T</type>
      <name>partial_sort_copy</name>
      <anchorfile>cpp/algorithm/partial_sort_copy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::deca</class>
    <class kind="class">std::extreme_value_distribution</class>
    <class kind="class">std::cout</class>
    <class kind="class">std::decay</class>
    <class kind="class">std::is_trivially_move_assignable</class>
    <class kind="class">std::adopt_lock_t</class>
    <member kind="function">
      <type>T</type>
      <name>make_exception_ptr</name>
      <anchorfile>cpp/error/make_exception_ptr</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wcerr</class>
    <member kind="function">
      <type>T</type>
      <name>frexp</name>
      <anchorfile>cpp/numeric/math/frexp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::lognormal_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>isxdigit</name>
      <anchorfile>cpp/string/byte/isxdigit</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wclog</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_exchange_explicit</name>
      <anchorfile>cpp/atomic/atomic_exchange</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wprintf</name>
      <anchorfile>cpp/io/c/fwprintf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::char_traits</class>
    <class kind="class">std::remove_reference</class>
    <member kind="function">
      <type>T</type>
      <name>fdim</name>
      <anchorfile>cpp/numeric/math/fdim</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::num_get</class>
    <member kind="function">
      <type>T</type>
      <name>wctype</name>
      <anchorfile>cpp/string/wide/wctype</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_pointer</class>
    <member kind="function">
      <type>T</type>
      <name>mbrtoc32</name>
      <anchorfile>cpp/string/multibyte/mbrtoc32</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setw</name>
      <anchorfile>cpp/io/manip/setw</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_temporary_buffer</name>
      <anchorfile>cpp/memory/get_temporary_buffer</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fmax</name>
      <anchorfile>cpp/numeric/math/fmax</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::multiset</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_thread_fence</name>
      <anchorfile>cpp/atomic/atomic_thread_fence</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_exchange</name>
      <anchorfile>cpp/atomic/atomic_exchange</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::weak_ptr</class>
    <class kind="class">std::bidirectional_iterator_tag</class>
    <class kind="class">std::wstring_convert</class>
    <member kind="function">
      <type>T</type>
      <name>fgetwc</name>
      <anchorfile>cpp/io/c/fgetwc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swprintf</name>
      <anchorfile>cpp/io/c/fwprintf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>prev_permutation</name>
      <anchorfile>cpp/algorithm/prev_permutation</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::greater_equal</class>
    <class kind="class">std::is_trivially_constructible</class>
    <member kind="function">
      <type>T</type>
      <name>max_element</name>
      <anchorfile>cpp/algorithm/max_element</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::string</class>
    <class kind="class">std::discrete_distribution</class>
    <class kind="class">std::wostream</class>
    <class kind="class">std::is_polymorphic</class>
    <member kind="function">
      <type>T</type>
      <name>set_symmetric_difference</name>
      <anchorfile>cpp/algorithm/set_symmetric_difference</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcscpy</name>
      <anchorfile>cpp/string/wide/wcscpy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>const_pointer_cast</name>
      <anchorfile>cpp/memory/shared_ptr/pointer_cast</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>minmax_element</name>
      <anchorfile>cpp/algorithm/minmax_element</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstok</name>
      <anchorfile>cpp/string/wide/wcstok</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ref</name>
      <anchorfile>cpp/utility/functional/ref</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::reverse_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>feupdateenv</name>
      <anchorfile>cpp/numeric/fenv/feupdateenv</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::bad_array_new_length</class>
    <member kind="function">
      <type>T</type>
      <name>endl</name>
      <anchorfile>cpp/io/manip/endl</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>cpp/iterator/end</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::condition_variable</class>
    <member kind="function">
      <type>T</type>
      <name>wmemmove</name>
      <anchorfile>cpp/string/wide/wmemmove</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fmin</name>
      <anchorfile>cpp/numeric/math/fmin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_fill_n</name>
      <anchorfile>cpp/memory/uninitialized_fill_n</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ranlux48</class>
    <member kind="function">
      <type>T</type>
      <name>nouppercase</name>
      <anchorfile>cpp/io/manip/uppercase</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>noshowpos</name>
      <anchorfile>cpp/io/manip/showpos</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ctime</name>
      <anchorfile>cpp/chrono/c/ctime</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wmemset</name>
      <anchorfile>cpp/string/wide/wmemset</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::unexpected_handler</class>
    <member kind="function">
      <type>T</type>
      <name>iswpunct</name>
      <anchorfile>cpp/string/wide/iswpunct</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::piecewise_constant_distribution</class>
    <class kind="class">std::codecvt_base</class>
    <class kind="class">std::set</class>
    <member kind="function">
      <type>T</type>
      <name>pop_heap</name>
      <anchorfile>cpp/algorithm/pop_heap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sprintf</name>
      <anchorfile>cpp/io/c/fprintf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fixed</name>
      <anchorfile>cpp/io/manip/fixed</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_shared</name>
      <anchorfile>cpp/memory/shared_ptr/make_shared</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::forward_iterator_tag</class>
    <class kind="class">std::codecvt_byname</class>
    <class kind="class">std::pointer_safety</class>
    <class kind="class">std::uint_least64_t</class>
    <class kind="class">std::placeholders</class>
    <class kind="class">std::nothrow_t</class>
    <class kind="class">std::is_nothrow_copy_assignable</class>
    <class kind="class">std::is_same</class>
    <member kind="function">
      <type>T</type>
      <name>make_heap</name>
      <anchorfile>cpp/algorithm/make_heap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fmod</name>
      <anchorfile>cpp/numeric/math/fmod</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::unique_lock</class>
    <class kind="class">std::basic_ostringstream</class>
    <member kind="function">
      <type>T</type>
      <name>atol</name>
      <anchorfile>cpp/string/byte/atoi</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_error_code_enum</class>
    <class kind="class">std::time_put_byname</class>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_copy</name>
      <anchorfile>cpp/memory/uninitialized_copy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::time_get</class>
    <member kind="function">
      <type>T</type>
      <name>dynamic_pointer_cast</name>
      <anchorfile>cpp/memory/shared_ptr/pointer_cast</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_union</name>
      <anchorfile>cpp/algorithm/set_union</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::regex</class>
    <class kind="class">std::cin</class>
    <member kind="function">
      <type>T</type>
      <name>hexfloat</name>
      <anchorfile>cpp/io/manip/fixed</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vswprintf</name>
      <anchorfile>cpp/io/c/vfwprintf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>asctime</name>
      <anchorfile>cpp/chrono/c/asctime</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::unordered_map</class>
    <member kind="function">
      <type>T</type>
      <name>iswspace</name>
      <anchorfile>cpp/string/wide/iswspace</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::initializer_list</class>
    <member kind="function">
      <type>T</type>
      <name>nan</name>
      <anchorfile>cpp/numeric/math/nan</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sort</name>
      <anchorfile>cpp/algorithm/sort</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>quick_exit</name>
      <anchorfile>cpp/utility/program/quick_exit</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_const</class>
    <member kind="function">
      <type>T</type>
      <name>log10</name>
      <anchorfile>cpp/numeric/math/log10</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_regex</class>
    <member kind="function">
      <type>T</type>
      <name>mbstowcs</name>
      <anchorfile>cpp/string/multibyte/mbstowcs</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isspace</name>
      <anchorfile>cpp/string/byte/isspace</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::poisson_distribution</class>
    <class kind="class">std::bad_typeid</class>
    <member kind="function">
      <type>T</type>
      <name>strncat</name>
      <anchorfile>cpp/string/byte/strncat</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::less_equal</class>
    <member kind="function">
      <type>T</type>
      <name>isinf</name>
      <anchorfile>cpp/numeric/math/isinf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atof</name>
      <anchorfile>cpp/string/byte/atof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::sig_atomic_t</class>
    <member kind="function">
      <type>T</type>
      <name>erf</name>
      <anchorfile>cpp/numeric/math/erf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_sorted_until</name>
      <anchorfile>cpp/algorithm/is_sorted_until</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbrt</name>
      <anchorfile>cpp/numeric/math/cbrt</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>log1p</name>
      <anchorfile>cpp/numeric/math/log1p</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>return_temporary_buffer</name>
      <anchorfile>cpp/memory/return_temporary_buffer</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mbsrtowcs</name>
      <anchorfile>cpp/string/multibyte/mbsrtowcs</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>feraiseexcept</name>
      <anchorfile>cpp/numeric/fenv/feraiseexcept</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fseek</name>
      <anchorfile>cpp/io/c/fseek</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::make_unsigned</class>
    <class kind="class">std::basic_filebuf</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_or_explicit</name>
      <anchorfile>cpp/atomic/atomic_fetch_or</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::logical_or</class>
    <member kind="function">
      <type>T</type>
      <name>log</name>
      <anchorfile>cpp/numeric/math/log</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putchar</name>
      <anchorfile>cpp/io/c/putchar</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_tuple</name>
      <anchorfile>cpp/utility/tuple/make_tuple</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>expm1</name>
      <anchorfile>cpp/numeric/math/expm1</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wstringbuf</class>
    <member kind="function">
      <type>T</type>
      <name>fma</name>
      <anchorfile>cpp/numeric/math/fma</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::kilo</class>
    <class kind="class">std::bernoulli_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>remove_copy_if</name>
      <anchorfile>cpp/algorithm/remove_copy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showpoint</name>
      <anchorfile>cpp/io/manip/showpoint</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::int16_t</class>
    <member kind="function">
      <type>T</type>
      <name>fscanf</name>
      <anchorfile>cpp/io/c/fscanf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stable_partition</name>
      <anchorfile>cpp/algorithm/stable_partition</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ios</class>
    <class kind="class">std::int32_t</class>
    <member kind="function">
      <type>T</type>
      <name>fill_n</name>
      <anchorfile>cpp/algorithm/fill_n</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_rvalue_reference</class>
    <member kind="function">
      <type>T</type>
      <name>remove_copy</name>
      <anchorfile>cpp/algorithm/remove_copy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_compare_exchange_strong_explicit</name>
      <anchorfile>cpp/atomic/atomic_compare_exchange</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::integral_constant</class>
    <class kind="class">std::wsmatch</class>
    <member kind="function">
      <type>T</type>
      <name>wctomb</name>
      <anchorfile>cpp/string/multibyte/wctomb</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fgets</name>
      <anchorfile>cpp/io/c/fgets</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remainder</name>
      <anchorfile>cpp/numeric/math/remainder</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::cerr</class>
    <class kind="class">std::codecvt_utf8</class>
    <member kind="function">
      <type>T</type>
      <name>allocate_shared</name>
      <anchorfile>cpp/memory/shared_ptr/allocate_shared</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ratio_add</class>
    <member kind="function">
      <type>T</type>
      <name>unique</name>
      <anchorfile>cpp/algorithm/unique</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_trivially_move_constructible</class>
    <member kind="function">
      <type>T</type>
      <name>includes</name>
      <anchorfile>cpp/algorithm/includes</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswalnum</name>
      <anchorfile>cpp/string/wide/iswalnum</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wcsub_match</class>
    <member kind="function">
      <type>T</type>
      <name>exit</name>
      <anchorfile>cpp/utility/program/exit</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put_time</name>
      <anchorfile>cpp/io/manip/put_time</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_string</name>
      <anchorfile>cpp/string/basic_string/to_string</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_heap_until</name>
      <anchorfile>cpp/algorithm/is_heap_until</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_member_pointer</class>
    <member kind="function">
      <type>T</type>
      <name>wcstold</name>
      <anchorfile>cpp/string/wide/wcstof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wstreampos</class>
    <class kind="class">std::uint_least16_t</class>
    <member kind="function">
      <type>T</type>
      <name>stold</name>
      <anchorfile>cpp/string/basic_string/stof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ftell</name>
      <anchorfile>cpp/io/c/ftell</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::tuple</class>
    <member kind="function">
      <type>T</type>
      <name>copy_backward</name>
      <anchorfile>cpp/algorithm/copy_backward</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstoll</name>
      <anchorfile>cpp/string/wide/wcstol</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>perror</name>
      <anchorfile>cpp/io/c/perror</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vwscanf</name>
      <anchorfile>cpp/io/c/vfwscanf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stable_sort</name>
      <anchorfile>cpp/algorithm/stable_sort</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::make_signed</class>
    <member kind="function">
      <type>T</type>
      <name>generic_category</name>
      <anchorfile>cpp/error/generic_category</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>abs(int)</name>
      <anchorfile>cpp/numeric/math/abs</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fgetws</name>
      <anchorfile>cpp/io/c/fgetws</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::logic_error</class>
    <class kind="class">std::sregex_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>showpos</name>
      <anchorfile>cpp/io/manip/showpos</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::int_least64_t</class>
    <member kind="function">
      <type>T</type>
      <name>exp</name>
      <anchorfile>cpp/numeric/math/exp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::binary_negate</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>cpp/algorithm/fill</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isalpha</name>
      <anchorfile>cpp/string/byte/isalpha</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::discard_block_engine</class>
    <class kind="class">std::is_trivially_assignable</class>
    <class kind="class">std::add_cv</class>
    <member kind="function">
      <type>T</type>
      <name>lgamma</name>
      <anchorfile>cpp/numeric/math/lgamma</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::pico</class>
    <class kind="class">std::iterator_traits</class>
    <class kind="class">std::is_trivially_default_constructible</class>
    <member kind="function">
      <type>T</type>
      <name>feclearexcept</name>
      <anchorfile>cpp/numeric/fenv/feclearexcept</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsncpy</name>
      <anchorfile>cpp/string/wide/wcsncpy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>undeclare_reachable</name>
      <anchorfile>cpp/memory/gc/undeclare_reachable</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::shared_ptr</class>
    <member kind="function">
      <type>T</type>
      <name>oct</name>
      <anchorfile>cpp/io/manip/hex</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::bad_alloc</class>
    <class kind="class">std::ostringstream</class>
    <class kind="class">std::basic_fstream</class>
    <class kind="class">std::stringbuf</class>
    <class kind="class">std::exponential_distribution</class>
    <class kind="class">std::uint32_t</class>
    <member kind="function">
      <type>T</type>
      <name>strspn</name>
      <anchorfile>cpp/string/byte/strspn</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wcregex_iterator</class>
    <class kind="class">std::bad_function_call</class>
    <member kind="function">
      <type>T</type>
      <name>realloc</name>
      <anchorfile>cpp/memory/c/realloc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>cpp/algorithm/copy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>binary_search</name>
      <anchorfile>cpp/algorithm/binary_search</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>system_category</name>
      <anchorfile>cpp/error/system_category</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mbrtowc</name>
      <anchorfile>cpp/string/multibyte/mbrtowc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::false_type</class>
    <member kind="function">
      <type>T</type>
      <name>strtof</name>
      <anchorfile>cpp/string/byte/strtof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mem_fn</name>
      <anchorfile>cpp/utility/functional/mem_fn</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wregex</class>
    <member kind="function">
      <type>T</type>
      <name>distance</name>
      <anchorfile>cpp/iterator/distance</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lock</name>
      <anchorfile>cpp/thread/lock</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strcmp</name>
      <anchorfile>cpp/string/byte/strcmp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tmpfile</name>
      <anchorfile>cpp/io/c/tmpfile</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hypot</name>
      <anchorfile>cpp/numeric/math/hypot</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getenv</name>
      <anchorfile>cpp/utility/program/getenv</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strrchr</name>
      <anchorfile>cpp/string/byte/strrchr</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>cpp/algorithm/count</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::uint_least8_t</class>
    <member kind="function">
      <type>T</type>
      <name>tan</name>
      <anchorfile>cpp/numeric/math/tan</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strftime</name>
      <anchorfile>cpp/chrono/c/strftime</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::uniform_real_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>stod</name>
      <anchorfile>cpp/string/basic_string/stof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>towupper</name>
      <anchorfile>cpp/string/wide/towupper</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::smatch</class>
    <class kind="class">std::cregex_token_iterator</class>
    <class kind="class">std::range_error</class>
    <class kind="class">std::is_assignable</class>
    <member kind="function">
      <type>T</type>
      <name>atoll</name>
      <anchorfile>cpp/string/byte/atoi</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_copy_assignable</class>
    <class kind="class">std::invalid_argument</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_store</name>
      <anchorfile>cpp/atomic/atomic_store</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_unsigned</class>
    <class kind="class">std::jmp_buf</class>
    <class kind="class">std::is_class</class>
    <class kind="class">std::geometric_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>stoi</name>
      <anchorfile>cpp/string/basic_string/stol</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rethrow_exception</name>
      <anchorfile>cpp/error/rethrow_exception</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::uint_fast8_t</class>
    <member kind="function">
      <type>T</type>
      <name>sin</name>
      <anchorfile>cpp/numeric/math/sin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_sub_explicit</name>
      <anchorfile>cpp/atomic/atomic_fetch_sub</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unexpected</name>
      <anchorfile>cpp/error/unexpected</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mbtowc</name>
      <anchorfile>cpp/string/multibyte/mbtowc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::mersenne_twister_engine</class>
    <member kind="function">
      <type>T</type>
      <name>get_time</name>
      <anchorfile>cpp/io/manip/get_time</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>partition</name>
      <anchorfile>cpp/algorithm/partition</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>next</name>
      <anchorfile>cpp/iterator/next</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_arithmetic</class>
    <class kind="class">std::negate</class>
    <class kind="class">std::try_to_lock_t</class>
    <class kind="class">std::wfilebuf</class>
    <class kind="class">std::is_compound</class>
    <class kind="class">std::iostream</class>
    <class kind="class">std::is_object</class>
    <member kind="function">
      <type>T</type>
      <name>isfinite</name>
      <anchorfile>cpp/numeric/math/isfinite</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>boolalpha</name>
      <anchorfile>cpp/io/manip/boolalpha</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetestexcept</name>
      <anchorfile>cpp/numeric/fenv/fetestexcept</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mbrlen</name>
      <anchorfile>cpp/string/multibyte/mbrlen</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::recursive_mutex</class>
    <class kind="class">std::is_copy_constructible</class>
    <member kind="function">
      <type>T</type>
      <name>iswgraph</name>
      <anchorfile>cpp/string/wide/iswgraph</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_utf8_utf16</class>
    <class kind="class">std::not_equal_to</class>
    <class kind="class">std::is_destructible</class>
    <class kind="class">std::int_fast32_t</class>
    <member kind="function">
      <type>T</type>
      <name>time</name>
      <anchorfile>cpp/chrono/c/time</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_compare_exchange_strong</name>
      <anchorfile>cpp/atomic/atomic_compare_exchange</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::rank</class>
    <member kind="function">
      <type>T</type>
      <name>wcschr</name>
      <anchorfile>cpp/string/wide/wcschr</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uppercase</name>
      <anchorfile>cpp/io/manip/uppercase</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::milli</class>
    <class kind="class">std::deci</class>
    <member kind="function">
      <type>T</type>
      <name>lower_bound</name>
      <anchorfile>cpp/algorithm/lower_bound</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::add_lvalue_reference</class>
    <class kind="class">std::is_bind_expression</class>
    <class kind="class">std::ios_base</class>
    <member kind="function">
      <type>T</type>
      <name>copy_if</name>
      <anchorfile>cpp/algorithm/copy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ratio_less</class>
    <class kind="class">std::int64_t</class>
    <class kind="class">std::nullptr_t</class>
    <member kind="function">
      <type>T</type>
      <name>isnan</name>
      <anchorfile>cpp/numeric/math/isnan</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_facet</name>
      <anchorfile>cpp/locale/has_facet</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>kill_dependency</name>
      <anchorfile>cpp/atomic/kill_dependency</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_copy_n</name>
      <anchorfile>cpp/memory/uninitialized_copy_n</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::stack</class>
    <member kind="function">
      <type>T</type>
      <name>feholdexcept</name>
      <anchorfile>cpp/numeric/fenv/feholdexcept</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>div</name>
      <anchorfile>cpp/numeric/math/div</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at_quick_exit</name>
      <anchorfile>cpp/utility/program/at_quick_exit</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::uint_fast64_t</class>
    <class kind="class">std::is_reference</class>
    <class kind="class">std::ratio</class>
    <class kind="class">std::shared_future</class>
    <class kind="class">std::u16streampos</class>
    <member kind="function">
      <type>T</type>
      <name>wcspbrk</name>
      <anchorfile>cpp/string/wide/wcspbrk</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>search</name>
      <anchorfile>cpp/algorithm/search</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wistream</class>
    <class kind="class">std::aligned_storage</class>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>cpp/algorithm/find_first_of</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iota</name>
      <anchorfile>cpp/algorithm/iota</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wstreambuf</class>
    <member kind="function">
      <type>T</type>
      <name>declare_reachable</name>
      <anchorfile>cpp/memory/gc/declare_reachable</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_compare_exchange_weak</name>
      <anchorfile>cpp/atomic/atomic_compare_exchange</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::binary_function</class>
    <member kind="function">
      <type>T</type>
      <name>strtod</name>
      <anchorfile>cpp/string/byte/strtof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>accumulate</name>
      <anchorfile>cpp/algorithm/accumulate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsrchr</name>
      <anchorfile>cpp/string/wide/wcsrchr</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::out_of_range</class>
    <member kind="function">
      <type>T</type>
      <name>min_element</name>
      <anchorfile>cpp/algorithm/min_element</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::independent_bits_engine</class>
    <member kind="function">
      <type>T</type>
      <name>clearerr</name>
      <anchorfile>cpp/io/c/clearerr</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>random_shuffle</name>
      <anchorfile>cpp/algorithm/random_shuffle</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::stringstream</class>
    <class kind="class">std::tera</class>
    <member kind="function">
      <type>T</type>
      <name>iswalpha</name>
      <anchorfile>cpp/string/wide/iswalpha</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::recursive_timed_mutex</class>
    <class kind="class">std::nano</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_and</name>
      <anchorfile>cpp/atomic/atomic_fetch_sub</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wmemchr</name>
      <anchorfile>cpp/string/wide/wmemchr</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::unordered_multimap</class>
    <class kind="class">std::normal_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>bsearch</name>
      <anchorfile>cpp/algorithm/bsearch</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ilogb</name>
      <anchorfile>cpp/numeric/math/ilogb</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::minstd_rand</class>
    <class kind="class">std::is_signed</class>
    <member kind="function">
      <type>T</type>
      <name>unique_copy</name>
      <anchorfile>cpp/algorithm/unique_copy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>_Exit</name>
      <anchorfile>cpp/utility/program/_Exit</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>cpp/utility/move</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_end</name>
      <anchorfile>cpp/algorithm/find_end</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_move_constructible</class>
    <class kind="class">std::unique_ptr</class>
    <member kind="function">
      <type>T</type>
      <name>fesetexceptflag</name>
      <anchorfile>cpp/numeric/fenv/feexceptflag</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_nothrow_copy_constructible</class>
    <class kind="class">std::forward_list</class>
    <class kind="class">std::errc</class>
    <class kind="class">std::lconv</class>
    <member kind="function">
      <type>T</type>
      <name>nth_element</name>
      <anchorfile>cpp/algorithm/nth_element</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gets</name>
      <anchorfile>cpp/io/c/gets</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lexicographical_compare</name>
      <anchorfile>cpp/algorithm/lexicographical_compare</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>nearbyint</name>
      <anchorfile>cpp/numeric/math/nearbyint</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::strstreambuf</class>
    <class kind="class">std::locale</class>
    <class kind="class">std::equal_to</class>
    <member kind="function">
      <type>T</type>
      <name>memcpy</name>
      <anchorfile>cpp/string/byte/memcpy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fwrite</name>
      <anchorfile>cpp/io/c/fwrite</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::divides</class>
    <class kind="class">std::collate_byname</class>
    <member kind="function">
      <type>T</type>
      <name>unitbuf</name>
      <anchorfile>cpp/io/manip/unitbuf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswlower</name>
      <anchorfile>cpp/string/wide/iswlower</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mblen</name>
      <anchorfile>cpp/string/multibyte/mblen</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swscanf</name>
      <anchorfile>cpp/io/c/fwscanf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstoimax</name>
      <anchorfile>cpp/string/wide/wcstoimax</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::domain_error</class>
    <member kind="function">
      <type>T</type>
      <name>fprintf</name>
      <anchorfile>cpp/io/c/fprintf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_if</name>
      <anchorfile>cpp/algorithm/find</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_empty</class>
    <member kind="function">
      <type>T</type>
      <name>strtoimax</name>
      <anchorfile>cpp/string/byte/strtoimax</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isalnum</name>
      <anchorfile>cpp/string/byte/isalnum</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_add_explicit</name>
      <anchorfile>cpp/atomic/atomic_fetch_add</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_nothrow_default_constructible</class>
    <class kind="class">std::ratio_equal</class>
    <member kind="function">
      <type>T</type>
      <name>push_heap</name>
      <anchorfile>cpp/algorithm/push_heap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>cpp/algorithm/min</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fwprintf</name>
      <anchorfile>cpp/io/c/fwprintf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ostream</class>
    <class kind="class">std::streamsize</class>
    <member kind="function">
      <type>T</type>
      <name>uncaught_exception</name>
      <anchorfile>cpp/error/uncaught_exception</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::shared_lock</class>
    <member kind="function">
      <type>T</type>
      <name>strtoll</name>
      <anchorfile>cpp/string/byte/strtol</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::uint8_t</class>
    <member kind="function">
      <type>T</type>
      <name>throw_with_nested</name>
      <anchorfile>cpp/error/throw_with_nested</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shuffle</name>
      <anchorfile>cpp/algorithm/random_shuffle</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isprint</name>
      <anchorfile>cpp/string/byte/isprint</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_new_handler</name>
      <anchorfile>cpp/memory/new/get_new_handler</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>call_once</name>
      <anchorfile>cpp/thread/call_once</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>trunc</name>
      <anchorfile>cpp/numeric/math/trunc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcscspn</name>
      <anchorfile>cpp/string/wide/wcscspn</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::enable_shared_from_this</class>
    <class kind="class">std::ptrdiff_t</class>
    <member kind="function">
      <type>T</type>
      <name>mbrtoc16</name>
      <anchorfile>cpp/string/multibyte/mbrtoc16</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::int_fast8_t</class>
    <class kind="class">std::aligned_union</class>
    <member kind="function">
      <type>T</type>
      <name>lround</name>
      <anchorfile>cpp/numeric/math/round</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::future</class>
    <class kind="class">std::wcmatch</class>
    <class kind="class">std::overflow_error</class>
    <class kind="class">std::centi</class>
    <member kind="function">
      <type>T</type>
      <name>pow</name>
      <anchorfile>cpp/numeric/math/pow</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wssub_match</class>
    <class kind="class">std::is_nothrow_move_assignable</class>
    <class kind="class">std::pair</class>
    <member kind="function">
      <type>T</type>
      <name>tgamma</name>
      <anchorfile>cpp/numeric/math/tgamma</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erfc</name>
      <anchorfile>cpp/numeric/math/erfc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>llround</name>
      <anchorfile>cpp/numeric/math/round</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>abs(float)</name>
      <anchorfile>cpp/numeric/math/fabs</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>asinh</name>
      <anchorfile>cpp/numeric/math/asinh</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>feof</name>
      <anchorfile>cpp/io/c/feof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wsregex_token_iterator</class>
    <class kind="class">std::weibull_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>noskipws</name>
      <anchorfile>cpp/io/manip/skipws</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::less</class>
    <class kind="class">std::multiplies</class>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>cpp/algorithm/find</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atoi</name>
      <anchorfile>cpp/string/byte/atoi</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_enum</class>
    <member kind="function">
      <type>T</type>
      <name>not1</name>
      <anchorfile>cpp/utility/functional/not1</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vfscanf</name>
      <anchorfile>cpp/io/c/vfscanf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::unary_function</class>
    <member kind="function">
      <type>T</type>
      <name>stof</name>
      <anchorfile>cpp/string/basic_string/stof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>regex_search</name>
      <anchorfile>cpp/regex/regex_search</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::error_code</class>
    <class kind="class">std::yocto</class>
    <class kind="class">std::streampos</class>
    <class kind="class">std::istream_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>rotate_copy</name>
      <anchorfile>cpp/algorithm/rotate_copy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_new_handler</name>
      <anchorfile>cpp/memory/new/set_new_handler</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>undeclare_no_pointers</name>
      <anchorfile>cpp/memory/gc/undeclare_no_pointers</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wifstream</class>
    <member kind="function">
      <type>T</type>
      <name>async</name>
      <anchorfile>cpp/thread/async</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>partition_point</name>
      <anchorfile>cpp/algorithm/partition_point</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::moneypunct_byname</class>
    <member kind="function">
      <type>T</type>
      <name>vsscanf</name>
      <anchorfile>cpp/io/c/vfscanf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::terminate_handler</class>
    <class kind="class">std::ctype_base</class>
    <class kind="class">std::reference_wrapper</class>
    <member kind="function">
      <type>T</type>
      <name>fesetround</name>
      <anchorfile>cpp/numeric/fenv/feround</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_is_lock_free</name>
      <anchorfile>cpp/atomic/atomic_is_lock_free</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ranlux48_base</class>
    <member kind="function">
      <type>T</type>
      <name>tanh</name>
      <anchorfile>cpp/numeric/math/tanh</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::bit_not</class>
    <class kind="class">std::int_fast16_t</class>
    <member kind="function">
      <type>T</type>
      <name>ldiv</name>
      <anchorfile>cpp/numeric/math/div</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbase</name>
      <anchorfile>cpp/io/manip/setbase</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove</name>
      <anchorfile>cpp/algorithm/remove</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strtol</name>
      <anchorfile>cpp/string/byte/strtol</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strpbrk</name>
      <anchorfile>cpp/string/byte/strpbrk</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::error_category</class>
    <class kind="class">std::regex_traits</class>
    <member kind="function">
      <type>T</type>
      <name>signbit</name>
      <anchorfile>cpp/numeric/math/signbit</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsncat</name>
      <anchorfile>cpp/string/wide/wcsncat</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_money</name>
      <anchorfile>cpp/io/manip/get_money</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <namespace>std::regex_constants</namespace>
    <member kind="function">
      <type>T</type>
      <name>set_difference</name>
      <anchorfile>cpp/algorithm/set_difference</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::negative_binomial_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>cref</name>
      <anchorfile>cpp/utility/functional/ref</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_union</class>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>cpp/string/basic_string/getline</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::mt19937</class>
    <class kind="class">std::enable_if</class>
    <member kind="function">
      <type>T</type>
      <name>to_wstring</name>
      <anchorfile>cpp/string/basic_string/to_wstring</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::chi_squared_distribution</class>
    <class kind="class">std::add_rvalue_reference</class>
    <member kind="function">
      <type>T</type>
      <name>system</name>
      <anchorfile>cpp/utility/program/system</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>static_pointer_cast</name>
      <anchorfile>cpp/memory/shared_ptr/pointer_cast</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_istream</class>
    <class kind="class">std::ostream_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>wcstoumax</name>
      <anchorfile>cpp/string/wide/wcstoimax</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>memmove</name>
      <anchorfile>cpp/string/byte/memmove</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getwchar</name>
      <anchorfile>cpp/io/c/getwchar</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>scientific</name>
      <anchorfile>cpp/io/manip/fixed</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsftime</name>
      <anchorfile>cpp/chrono/c/wcsftime</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>cpp/iterator/begin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ceil</name>
      <anchorfile>cpp/numeric/math/ceil</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sinh</name>
      <anchorfile>cpp/numeric/math/sinh</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_permutation</name>
      <anchorfile>cpp/algorithm/is_permutation</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_trivially_copy_assignable</class>
    <member kind="function">
      <type>T</type>
      <name>generate_n</name>
      <anchorfile>cpp/algorithm/generate_n</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>acosh</name>
      <anchorfile>cpp/numeric/math/acosh</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::clog</class>
    <class kind="class">std::is_scalar</class>
    <member kind="function">
      <type>T</type>
      <name>advance</name>
      <anchorfile>cpp/iterator/advance</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::uses_allocator</class>
    <class kind="class">std::piecewise_linear_distribution</class>
    <class kind="class">std::hash</class>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>cpp/io/manip/flush</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::shuffle_order_engine</class>
    <namespace>std::chrono</namespace>
    <class kind="class">std::greater</class>
    <class kind="class">std::csub_match</class>
    <class kind="class">std::uintmax_t</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_xor</name>
      <anchorfile>cpp/atomic/atomic_fetch_xor</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::remove_pointer</class>
    <class kind="class">std::numeric_limits</class>
    <member kind="function">
      <type>T</type>
      <name>ws</name>
      <anchorfile>cpp/io/manip/ws</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::add_volatile</class>
    <class kind="class">std::once_flag</class>
    <class kind="class">std::is_literal_type</class>
    <class kind="class">std::money_base</class>
    <member kind="function">
      <type>T</type>
      <name>signal</name>
      <anchorfile>cpp/utility/program/signal</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>noshowbase</name>
      <anchorfile>cpp/io/manip/showbase</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::peta</class>
    <class kind="class">std::is_placeholder</class>
    <member kind="function">
      <type>T</type>
      <name>generate</name>
      <anchorfile>cpp/algorithm/generate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ldexp</name>
      <anchorfile>cpp/numeric/math/ldexp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::add_const</class>
    <class kind="class">std::basic_stringbuf</class>
    <class kind="class">std::tm</class>
    <class kind="class">std::is_abstract</class>
    <class kind="class">std::deque</class>
    <member kind="function">
      <type>T</type>
      <name>vsnprintf</name>
      <anchorfile>cpp/io/c/vfprintf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::allocator</class>
    <member kind="function">
      <type>T</type>
      <name>remove_if</name>
      <anchorfile>cpp/algorithm/remove</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::scoped_allocator_adaptor</class>
    <class kind="class">std::ssub_match</class>
    <member kind="function">
      <type>T</type>
      <name>stoull</name>
      <anchorfile>cpp/string/basic_string/stoul</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::messages_byname</class>
    <member kind="function">
      <type>T</type>
      <name>fegetexceptflag</name>
      <anchorfile>cpp/numeric/fenv/feexceptflag</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_if_not</name>
      <anchorfile>cpp/algorithm/find</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::promise</class>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>cpp/algorithm/merge</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>free</name>
      <anchorfile>cpp/memory/c/free</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count_if</name>
      <anchorfile>cpp/algorithm/count</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clock</name>
      <anchorfile>cpp/chrono/c/clock</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mktime</name>
      <anchorfile>cpp/chrono/c/mktime</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::add_pointer</class>
    <class kind="class">std::uintptr_t</class>
    <member kind="function">
      <type>T</type>
      <name>inserter</name>
      <anchorfile>cpp/iterator/inserter</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>puts</name>
      <anchorfile>cpp/io/c/puts</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::bit_and</class>
    <member kind="function">
      <type>T</type>
      <name>asin</name>
      <anchorfile>cpp/numeric/math/asin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::uniform_int_distribution</class>
    <class kind="class">std::type_info</class>
    <member kind="function">
      <type>T</type>
      <name>iscntrl</name>
      <anchorfile>cpp/string/byte/iscntrl</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>difftime</name>
      <anchorfile>cpp/chrono/c/difftime</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>terminate</name>
      <anchorfile>cpp/error/terminate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>memcmp</name>
      <anchorfile>cpp/string/byte/memcmp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::fisher_f_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_fill</name>
      <anchorfile>cpp/memory/uninitialized_fill</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::strstream</class>
    <member kind="function">
      <type>T</type>
      <name>hex</name>
      <anchorfile>cpp/io/manip/hex</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>cpp/utility/tuple/tie</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back_inserter</name>
      <anchorfile>cpp/iterator/back_inserter</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>upper_bound</name>
      <anchorfile>cpp/algorithm/upper_bound</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::time_get_byname</class>
    <class kind="class">std::basic_streambuf</class>
    <member kind="function">
      <type>T</type>
      <name>adjacent_find</name>
      <anchorfile>cpp/algorithm/adjacent_find</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_nothrow_constructible</class>
    <member kind="function">
      <type>T</type>
      <name>use_facet</name>
      <anchorfile>cpp/locale/use_facet</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::queue</class>
    <class kind="class">std::is_base_of</class>
    <class kind="class">std::intmax_t</class>
    <class kind="class">std::ranlux24</class>
    <member kind="function">
      <type>T</type>
      <name>vfwprintf</name>
      <anchorfile>cpp/io/c/vfwprintf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_add</name>
      <anchorfile>cpp/atomic/atomic_fetch_add</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::remove_cv</class>
    <member kind="function">
      <type>T</type>
      <name>fsetpos</name>
      <anchorfile>cpp/io/c/fsetpos</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>malloc</name>
      <anchorfile>cpp/memory/c/malloc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>localtime</name>
      <anchorfile>cpp/chrono/c/localtime</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_trivially_destructible</class>
    <class kind="class">std::wcin</class>
    <member kind="function">
      <type>T</type>
      <name>wcscmp</name>
      <anchorfile>cpp/string/wide/wcscmp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c32rtomb</name>
      <anchorfile>cpp/string/multibyte/c32rtomb</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isupper</name>
      <anchorfile>cpp/string/byte/isupper</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::atomic</class>
    <class kind="class">std::basic_stringstream</class>
    <member kind="function">
      <type>T</type>
      <name>wcstod</name>
      <anchorfile>cpp/string/wide/wcstof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tolower</name>
      <anchorfile>cpp/string/byte/tolower</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_void</class>
    <member kind="function">
      <type>T</type>
      <name>sort_heap</name>
      <anchorfile>cpp/algorithm/sort_heap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::plus</class>
    <member kind="function">
      <type>T</type>
      <name>isdigit</name>
      <anchorfile>cpp/string/byte/isdigit</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::bitset</class>
    <member kind="function">
      <type>T</type>
      <name>wcslen</name>
      <anchorfile>cpp/string/wide/wcslen</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wmemcmp</name>
      <anchorfile>cpp/string/wide/wmemcmp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::FILE</class>
    <member kind="function">
      <type>T</type>
      <name>move_if_noexcept</name>
      <anchorfile>cpp/utility/move_if_noexcept</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>declval</name>
      <anchorfile>cpp/utility/declval</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fpclassify</name>
      <anchorfile>cpp/numeric/math/fpclassify</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswupper</name>
      <anchorfile>cpp/string/wide/iswupper</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::thread</class>
    <class kind="class">std::future_error</class>
    <class kind="class">std::time_base</class>
    <class kind="class">std::alignment_of</class>
    <class kind="class">std::time_put</class>
    <class kind="class">std::bit_or</class>
    <member kind="function">
      <type>T</type>
      <name>rand</name>
      <anchorfile>cpp/numeric/random/rand</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_compare_exchange_weak_explicit</name>
      <anchorfile>cpp/atomic/atomic_compare_exchange</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::pointer_traits</class>
    <member kind="function">
      <type>T</type>
      <name>partial_sort</name>
      <anchorfile>cpp/algorithm/partial_sort</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_string</class>
    <member kind="function">
      <type>T</type>
      <name>llrint</name>
      <anchorfile>cpp/numeric/math/rint</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::priority_queue</class>
    <member kind="function">
      <type>T</type>
      <name>fclose</name>
      <anchorfile>cpp/io/c/fclose</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reverse</name>
      <anchorfile>cpp/algorithm/reverse</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::exa</class>
    <member kind="function">
      <type>T</type>
      <name>partial_sum</name>
      <anchorfile>cpp/algorithm/partial_sum</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wostringstream</class>
    <member kind="function">
      <type>T</type>
      <name>showbase</name>
      <anchorfile>cpp/io/manip/showbase</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_default_constructible</class>
    <class kind="class">std::cregex_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>vswscanf</name>
      <anchorfile>cpp/io/c/vfwscanf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wstring</class>
    <member kind="function">
      <type>T</type>
      <name>atan</name>
      <anchorfile>cpp/numeric/math/atan</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atanh</name>
      <anchorfile>cpp/numeric/math/atanh</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::remove_all_extents</class>
    <member kind="function">
      <type>T</type>
      <name>iter_swap</name>
      <anchorfile>cpp/algorithm/iter_swap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>scalbln</name>
      <anchorfile>cpp/numeric/math/scalbn</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::istrstream</class>
    <member kind="function">
      <type>T</type>
      <name>reverse_copy</name>
      <anchorfile>cpp/algorithm/reverse_copy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::unary_negate</class>
    <class kind="class">std::unordered_multiset</class>
    <class kind="class">std::basic_ostream</class>
    <class kind="class">std::wsregex_iterator</class>
    <class kind="class">std::uint_fast16_t</class>
    <class kind="class">std::is_nothrow_assignable</class>
    <member kind="function">
      <type>T</type>
      <name>forward</name>
      <anchorfile>cpp/utility/forward</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::moneypunct</class>
    <member kind="function">
      <type>T</type>
      <name>getc</name>
      <anchorfile>cpp/io/c/fgetc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::type_index</class>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>cpp/algorithm/equal_range</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_sub</name>
      <anchorfile>cpp/atomic/atomic_fetch_sub</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_partitioned</name>
      <anchorfile>cpp/algorithm/is_partitioned</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>next_permutation</name>
      <anchorfile>cpp/algorithm/next_permutation</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isblank</name>
      <anchorfile>cpp/string/byte/isblank</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>noshowpoint</name>
      <anchorfile>cpp/io/manip/showpoint</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atan2</name>
      <anchorfile>cpp/numeric/math/atan2</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>nanf</name>
      <anchorfile>cpp/numeric/math/nan</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>towctrans</name>
      <anchorfile>cpp/string/wide/towctrans</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_standard_layout</class>
    <class kind="class">std::timed_mutex</class>
    <member kind="function">
      <type>T</type>
      <name>right</name>
      <anchorfile>cpp/io/manip/left</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fputwc</name>
      <anchorfile>cpp/io/c/fputwc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strtoul</name>
      <anchorfile>cpp/string/byte/strtoul</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_heap</name>
      <anchorfile>cpp/algorithm/is_heap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::bad_exception</class>
    <member kind="function">
      <type>T</type>
      <name>fflush</name>
      <anchorfile>cpp/io/c/fflush</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strtoumax</name>
      <anchorfile>cpp/string/byte/strtoimax</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>nexttoward</name>
      <anchorfile>cpp/numeric/math/nextafter</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::int_fast64_t</class>
    <class kind="class">std::function</class>
    <member kind="function">
      <type>T</type>
      <name>nounitbuf</name>
      <anchorfile>cpp/io/manip/unitbuf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::bad_cast</class>
    <class kind="class">std::error_condition</class>
    <class kind="class">std::filebuf</class>
    <class kind="class">std::int_least16_t</class>
    <member kind="function">
      <type>T</type>
      <name>ispunct</name>
      <anchorfile>cpp/string/byte/ispunct</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::istreambuf_iterator</class>
    <class kind="class">std::u16string</class>
    <member kind="function">
      <type>T</type>
      <name>noboolalpha</name>
      <anchorfile>cpp/io/manip/boolalpha</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_pair</name>
      <anchorfile>cpp/utility/pair/make_pair</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_error_condition_enum</class>
    <class kind="class">std::is_nothrow_destructible</class>
    <class kind="class">std::wiostream</class>
    <member kind="function">
      <type>T</type>
      <name>iswctype</name>
      <anchorfile>cpp/string/wide/iswctype</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::allocator_arg_t</class>
    <member kind="function">
      <type>T</type>
      <name>srand</name>
      <anchorfile>cpp/numeric/random/srand</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <namespace>std::rel_ops</namespace>
    <class kind="class">std::uint_least32_t</class>
    <class kind="class">std::collate</class>
    <member kind="function">
      <type>T</type>
      <name>replace_copy</name>
      <anchorfile>cpp/algorithm/replace_copy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>future_category</name>
      <anchorfile>cpp/thread/future/future_category</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::remove_const</class>
    <member kind="function">
      <type>T</type>
      <name>resetiosflags</name>
      <anchorfile>cpp/io/manip/resetiosflags</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vprintf</name>
      <anchorfile>cpp/io/c/vfprintf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::u32string</class>
    <class kind="class">std::uint_fast32_t</class>
    <member kind="function">
      <type>T</type>
      <name>gmtime</name>
      <anchorfile>cpp/chrono/c/gmtime</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_lvalue_reference</class>
    <member kind="function">
      <type>T</type>
      <name>align</name>
      <anchorfile>cpp/memory/align</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tuple_cat</name>
      <anchorfile>cpp/utility/tuple/tuple_cat</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends</name>
      <anchorfile>cpp/io/manip/ends</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_terminate</name>
      <anchorfile>cpp/error/set_terminate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lrint</name>
      <anchorfile>cpp/numeric/math/rint</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::complex</class>
    <class kind="class">std::ofstream</class>
    <class kind="class">std::insert_iterator</class>
    <class kind="class">std::bad_array_length</class>
    <member kind="function">
      <type>T</type>
      <name>none_of</name>
      <anchorfile>cpp/algorithm/all_any_none_of</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <namespace>std::this_thread</namespace>
    <member kind="function">
      <type>T</type>
      <name>wscanf</name>
      <anchorfile>cpp/io/c/fwscanf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fputc</name>
      <anchorfile>cpp/io/c/fputc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dec</name>
      <anchorfile>cpp/io/manip/hex</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strcat</name>
      <anchorfile>cpp/string/byte/strcat</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_trivially_copyable</class>
    <class kind="class">std::basic_istringstream</class>
    <class kind="class">std::basic_ifstream</class>
    <class kind="class">std::list</class>
    <member kind="function">
      <type>T</type>
      <name>raise</name>
      <anchorfile>cpp/utility/program/raise</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::minus</class>
    <member kind="function">
      <type>T</type>
      <name>wcsspn</name>
      <anchorfile>cpp/string/wide/wcsspn</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fabs</name>
      <anchorfile>cpp/numeric/math/fabs</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wmemcpy</name>
      <anchorfile>cpp/string/wide/wmemcpy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy_n</name>
      <anchorfile>cpp/algorithm/copy_n</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::map</class>
    <class kind="class">std::linear_congruential_engine</class>
    <member kind="function">
      <type>T</type>
      <name>rethrow_if_nested</name>
      <anchorfile>cpp/error/rethrow_if_nested</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setlocale</name>
      <anchorfile>cpp/locale/setlocale</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_utf16</class>
    <member kind="function">
      <type>T</type>
      <name>addressof</name>
      <anchorfile>cpp/memory/addressof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calloc</name>
      <anchorfile>cpp/memory/c/calloc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::cmatch</class>
    <member kind="function">
      <type>T</type>
      <name>strerror</name>
      <anchorfile>cpp/string/byte/strerror</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::defer_lock_t</class>
    <member kind="function">
      <type>T</type>
      <name>strcpy</name>
      <anchorfile>cpp/string/byte/strcpy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::exception</class>
    <member kind="function">
      <type>T</type>
      <name>wcstoull</name>
      <anchorfile>cpp/string/wide/wcstoul</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c16rtomb</name>
      <anchorfile>cpp/string/multibyte/c16rtomb</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::front_insert_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>generate_canonical</name>
      <anchorfile>cpp/numeric/random/generate_canonical</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vfprintf</name>
      <anchorfile>cpp/io/c/vfprintf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>notify_all_at_thread_exit</name>
      <anchorfile>cpp/thread/notify_all_at_thread_exit</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rotate</name>
      <anchorfile>cpp/algorithm/rotate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>current_exception</name>
      <anchorfile>cpp/error/current_exception</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strtok</name>
      <anchorfile>cpp/string/byte/strtok</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcscat</name>
      <anchorfile>cpp/string/wide/wcscat</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strncpy</name>
      <anchorfile>cpp/string/byte/strncpy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>towlower</name>
      <anchorfile>cpp/string/wide/towlower</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>floor</name>
      <anchorfile>cpp/numeric/math/floor</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::zetta</class>
    <member kind="function">
      <type>T</type>
      <name>left</name>
      <anchorfile>cpp/io/manip/left</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ferror</name>
      <anchorfile>cpp/io/c/ferror</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::streambuf</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_load_explicit</name>
      <anchorfile>cpp/atomic/atomic_load</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <namespace>std::experimental</namespace>
    <class kind="class">std::num_put</class>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>cpp/algorithm/swap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>acos</name>
      <anchorfile>cpp/numeric/math/acos</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::owner_less</class>
    <member kind="function">
      <type>T</type>
      <name>wcscoll</name>
      <anchorfile>cpp/string/wide/wcscoll</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sqrt</name>
      <anchorfile>cpp/numeric/math/sqrt</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::extent</class>
    <member kind="function">
      <type>T</type>
      <name>mbsinit</name>
      <anchorfile>cpp/string/multibyte/mbsinit</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::bad_optional_access</class>
    <member kind="function">
      <type>T</type>
      <name>qsort</name>
      <anchorfile>cpp/algorithm/qsort</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stoll</name>
      <anchorfile>cpp/string/basic_string/stol</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put_money</name>
      <anchorfile>cpp/io/manip/put_money</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstoul</name>
      <anchorfile>cpp/string/wide/wcstoul</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstol</name>
      <anchorfile>cpp/string/wide/wcstol</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atexit</name>
      <anchorfile>cpp/utility/program/atexit</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_or</name>
      <anchorfile>cpp/atomic/atomic_fetch_or</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rewind</name>
      <anchorfile>cpp/io/c/rewind</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsxfrm</name>
      <anchorfile>cpp/string/wide/wcsxfrm</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::yotta</class>
    <class kind="class">std::wcregex_token_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>round</name>
      <anchorfile>cpp/numeric/math/round</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::uint64_t</class>
    <class kind="class">std::messages</class>
    <member kind="function">
      <type>T</type>
      <name>vwprintf</name>
      <anchorfile>cpp/io/c/vfwprintf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>all_of</name>
      <anchorfile>cpp/algorithm/all_any_none_of</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::regex_token_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>replace</name>
      <anchorfile>cpp/algorithm/replace</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::move_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>remquo</name>
      <anchorfile>cpp/numeric/math/remquo</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>cpp/io/c/setbuf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::messages_base</class>
    <member kind="function">
      <type>T</type>
      <name>strncmp</name>
      <anchorfile>cpp/string/byte/strncmp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>localeconv</name>
      <anchorfile>cpp/locale/localeconv</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wctrans</name>
      <anchorfile>cpp/string/wide/wctrans</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::istringstream</class>
    <class kind="class">std::giga</class>
    <member kind="function">
      <type>T</type>
      <name>any_of</name>
      <anchorfile>cpp/algorithm/all_any_none_of</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::integer_sequence</class>
    <member kind="function">
      <type>T</type>
      <name>equal</name>
      <anchorfile>cpp/algorithm/equal</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>cpp/algorithm/max</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strxfrm</name>
      <anchorfile>cpp/string/byte/strxfrm</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::has_virtual_destructor</class>
    <class kind="class">std::max_align_t</class>
    <class kind="class">std::remove_volatile</class>
    <class kind="class">std::underlying_type</class>
    <member kind="function">
      <type>T</type>
      <name>iswxdigit</name>
      <anchorfile>cpp/string/wide/iswxdigit</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>labs</name>
      <anchorfile>cpp/numeric/math/abs</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::hecto</class>
    <member kind="function">
      <type>T</type>
      <name>regex_match</name>
      <anchorfile>cpp/regex/regex_match</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_member_object_pointer</class>
    <class kind="class">std::exception_ptr</class>
    <member kind="function">
      <type>T</type>
      <name>fputws</name>
      <anchorfile>cpp/io/c/fputws</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcrtomb</name>
      <anchorfile>cpp/string/multibyte/wcrtomb</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setprecision</name>
      <anchorfile>cpp/io/manip/setprecision</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setvbuf</name>
      <anchorfile>cpp/io/c/setvbuf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::nested_exception</class>
    <class kind="class">std::random_access_iterator_tag</class>
    <member kind="function">
      <type>T</type>
      <name>regex_replace</name>
      <anchorfile>cpp/regex/regex_replace</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ctype</class>
    <member kind="function">
      <type>T</type>
      <name>freopen</name>
      <anchorfile>cpp/io/c/freopen</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>logb</name>
      <anchorfile>cpp/numeric/math/logb</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::time_t</class>
    <member kind="function">
      <type>T</type>
      <name>wctob</name>
      <anchorfile>cpp/string/multibyte/wctob</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::knuth_b</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_load</name>
      <anchorfile>cpp/atomic/atomic_load</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>search_n</name>
      <anchorfile>cpp/algorithm/search_n</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>toupper</name>
      <anchorfile>cpp/string/byte/toupper</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::auto_ptr</class>
    <member kind="function">
      <type>T</type>
      <name>move_backward</name>
      <anchorfile>cpp/algorithm/move_backward</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_sorted</name>
      <anchorfile>cpp/algorithm/is_sorted</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::minstd_rand0</class>
    <member kind="function">
      <type>T</type>
      <name>strtoull</name>
      <anchorfile>cpp/string/byte/strtoul</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::sregex_token_iterator</class>
    <class kind="class">std::logical_not</class>
    <class kind="class">std::fpos_t</class>
    <member kind="function">
      <type>T</type>
      <name>iswblank</name>
      <anchorfile>cpp/string/wide/iswblank</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::istream</class>
    <class kind="class">std::seed_seq</class>
    <class kind="class">std::default_delete</class>
    <class kind="class">std::femto</class>
    <class kind="class">std::clock_t</class>
    <class kind="class">std::true_type</class>
    <member kind="function">
      <type>T</type>
      <name>get_pointer_safety</name>
      <anchorfile>cpp/memory/gc/get_pointer_safety</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::mbstate_t</class>
    <member kind="function">
      <type>T</type>
      <name>get_unexpected</name>
      <anchorfile>cpp/error/get_unexpected</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sscanf</name>
      <anchorfile>cpp/io/c/fscanf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ostrstream</class>
    <class kind="class">std::gamma_distribution</class>
    <class kind="class">std::bad_weak_ptr</class>
    <class kind="class">std::output_iterator_tag</class>
    <class kind="class">std::micro</class>
    <class kind="class">std::is_trivial</class>
    <member kind="function">
      <type>T</type>
      <name>fesetenv</name>
      <anchorfile>cpp/numeric/fenv/feenv</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_store_explicit</name>
      <anchorfile>cpp/atomic/atomic_store</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strtold</name>
      <anchorfile>cpp/string/byte/strtof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fread</name>
      <anchorfile>cpp/io/c/fread</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::packaged_task</class>
    <class kind="class">std::unordered_set</class>
    <class kind="class">std::is_volatile</class>
    <member kind="function">
      <type>T</type>
      <name>memchr</name>
      <anchorfile>cpp/string/byte/memchr</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>btowc</name>
      <anchorfile>cpp/string/multibyte/btowc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wfstream</class>
    <member kind="function">
      <type>T</type>
      <name>replace_if</name>
      <anchorfile>cpp/algorithm/replace</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::multimap</class>
    <member kind="function">
      <type>T</type>
      <name>strcoll</name>
      <anchorfile>cpp/string/byte/strcoll</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vsprintf</name>
      <anchorfile>cpp/io/c/vfprintf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mismatch</name>
      <anchorfile>cpp/algorithm/mismatch</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getchar</name>
      <anchorfile>cpp/io/c/getchar</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::atomic_flag</class>
    <member kind="function">
      <type>T</type>
      <name>islower</name>
      <anchorfile>cpp/string/byte/islower</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tmpnam</name>
      <anchorfile>cpp/io/c/tmpnam</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::numpunct_byname</class>
    <member kind="function">
      <type>T</type>
      <name>nanl</name>
      <anchorfile>cpp/numeric/math/nan</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::binomial_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>fopen</name>
      <anchorfile>cpp/io/c/fopen</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_iostream</class>
    <class kind="class">std::wofstream</class>
    <class kind="class">std::fpos</class>
    <class kind="class">std::underflow_error</class>
    <member kind="function">
      <type>T</type>
      <name>for_each</name>
      <anchorfile>cpp/algorithm/for_each</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fegetround</name>
      <anchorfile>cpp/numeric/fenv/feround</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ungetc</name>
      <anchorfile>cpp/io/c/ungetc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::cauchy_distribution</class>
    <class kind="class">std::is_trivially_copy_constructible</class>
    <class kind="class">std::conditional</class>
    <class kind="class">std::is_pod</class>
    <member kind="function">
      <type>T</type>
      <name>internal</name>
      <anchorfile>cpp/io/manip/left</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vfwscanf</name>
      <anchorfile>cpp/io/c/vfwscanf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::int_least8_t</class>
    <member kind="function">
      <type>T</type>
      <name>fgetc</name>
      <anchorfile>cpp/io/c/fgetc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::streamoff</class>
    <class kind="class">std::is_move_assignable</class>
    <class kind="class">std::int_least32_t</class>
    <member kind="function">
      <type>T</type>
      <name>wcstof</name>
      <anchorfile>cpp/string/wide/wcstof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wstringstream</class>
    <class kind="class">std::subtract_with_carry_engine</class>
    <class kind="class">std::regex_error</class>
    <member kind="function">
      <type>T</type>
      <name>bind</name>
      <anchorfile>cpp/utility/functional/bind</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>skipws</name>
      <anchorfile>cpp/io/manip/skipws</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_constructible</class>
    <class kind="class">std::piecewise_construct_t</class>
    <member kind="function">
      <type>T</type>
      <name>iswprint</name>
      <anchorfile>cpp/string/wide/iswprint</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstombs</name>
      <anchorfile>cpp/string/multibyte/wcstombs</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>inplace_merge</name>
      <anchorfile>cpp/algorithm/inplace_merge</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copysign</name>
      <anchorfile>cpp/numeric/math/copysign</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putwchar</name>
      <anchorfile>cpp/io/c/putwchar</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::mutex</class>
    <member kind="function">
      <type>T</type>
      <name>wcsstr</name>
      <anchorfile>cpp/string/wide/wcsstr</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fegetenv</name>
      <anchorfile>cpp/numeric/fenv/feenv</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>longjmp</name>
      <anchorfile>cpp/utility/program/longjmp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswcntrl</name>
      <anchorfile>cpp/string/wide/iswcntrl</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::system_error</class>
    <member kind="function">
      <type>T</type>
      <name>declare_no_pointers</name>
      <anchorfile>cpp/memory/gc/declare_no_pointers</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isnormal</name>
      <anchorfile>cpp/numeric/math/isnormal</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap_ranges</name>
      <anchorfile>cpp/algorithm/swap_ranges</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wistringstream</class>
    <class kind="class">std::is_floating_point</class>
    <member kind="function">
      <type>T</type>
      <name>minmax</name>
      <anchorfile>cpp/algorithm/minmax</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>defaultfloat</name>
      <anchorfile>cpp/io/manip/fixed</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rename</name>
      <anchorfile>cpp/io/c/rename</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>snprintf</name>
      <anchorfile>cpp/io/c/fprintf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock</name>
      <anchorfile>cpp/thread/try_lock</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ratio_not_equal</class>
    <class kind="class">std::ratio_multiply</class>
    <class kind="class">std::result_of</class>
    <class kind="class">std::is_fundamental</class>
    <member kind="function">
      <type>T</type>
      <name>stoul</name>
      <anchorfile>cpp/string/basic_string/stoul</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ifstream</class>
    <class kind="class">std::u32streampos</class>
    <member kind="function">
      <type>T</type>
      <name>fgetpos</name>
      <anchorfile>cpp/io/c/fgetpos</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::length_error</class>
    <member kind="function">
      <type>T</type>
      <name>partition_copy</name>
      <anchorfile>cpp/algorithm/partition_copy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vscanf</name>
      <anchorfile>cpp/io/c/vfscanf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front_inserter</name>
      <anchorfile>cpp/iterator/front_inserter</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::sub_match</class>
    <class kind="class">std::common_type</class>
    <member kind="function">
      <type>T</type>
      <name>get_terminate</name>
      <anchorfile>cpp/error/get_terminate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cosh</name>
      <anchorfile>cpp/numeric/math/cosh</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::shared_timed_mutex</class>
    <class kind="class">std::array</class>
    <class kind="class">std::random_device</class>
    <class kind="class">std::default_random_engine</class>
    <class kind="class">std::raw_storage_iterator</class>
    <class kind="class">std::is_convertible</class>
    <member kind="function">
      <type>T</type>
      <name>prev</name>
      <anchorfile>cpp/iterator/prev</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::uint16_t</class>
    <member kind="function">
      <type>T</type>
      <name>strchr</name>
      <anchorfile>cpp/string/byte/strchr</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_array</class>
    <member kind="function">
      <type>T</type>
      <name>strstr</name>
      <anchorfile>cpp/string/byte/strstr</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::mega</class>
    <member kind="function">
      <type>T</type>
      <name>printf</name>
      <anchorfile>cpp/io/c/fprintf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::numpunct</class>
    <class kind="class">std::money_put</class>
    <class kind="class">std::new_handler</class>
    <class kind="class">std::is_member_function_pointer</class>
    <member kind="function">
      <type>T</type>
      <name>setfill</name>
      <anchorfile>cpp/io/manip/setfill</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>inner_product</name>
      <anchorfile>cpp/algorithm/inner_product</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::is_function</name>
    <filename>cpp/types/is_function</filename>
  </compound>
  <compound kind="class">
    <name>std::input_iterator_tag</name>
    <filename>cpp/iterator/iterator_tags</filename>
  </compound>
  <compound kind="class">
    <name>std::logical_and</name>
    <filename>cpp/utility/functional/logical_and</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>cpp/utility/functional/logical_and</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::is_integral</name>
    <filename>cpp/types/is_integral</filename>
  </compound>
  <compound kind="class">
    <name>std::money_get</name>
    <filename>cpp/locale/money_get</filename>
    <member kind="function">
      <type>T</type>
      <name>do_get</name>
      <anchorfile>cpp/locale/money_get/get</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::money_get::char_type</class>
    <class kind="class">std::money_get::pattern</class>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>cpp/locale/money_get/get</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~money_get</name>
      <anchorfile>cpp/locale/money_get/~money_get</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::money_get::string_type</class>
    <class kind="class">std::money_get::iter_type</class>
    <member kind="function">
      <type>T</type>
      <name>money_get</name>
      <anchorfile>cpp/locale/money_get/money_get</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::money_get::char_type</name>
    <filename>cpp/locale/money_get</filename>
  </compound>
  <compound kind="class">
    <name>std::money_get::pattern</name>
    <filename>cpp/locale/money_base</filename>
  </compound>
  <compound kind="class">
    <name>std::money_get::string_type</name>
    <filename>cpp/locale/money_get</filename>
  </compound>
  <compound kind="class">
    <name>std::money_get::iter_type</name>
    <filename>cpp/locale/money_get</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_ofstream</name>
    <filename>cpp/io/basic_ofstream</filename>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>cpp/io/basic_ostream/seekp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>cpp/io/basic_ios/setstate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>cpp/io/ios_base/getloc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>cpp/io/ios_base/precision</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>cpp/io/ios_base/flags</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>cpp/io/basic_ios/widen</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_ofstream</name>
      <anchorfile>cpp/io/basic_ofstream/basic_ofstream</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>cpp/io/basic_ios/fill</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>cpp/io/ios_base/setf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ofstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>cpp/io/basic_ofstream/open</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>cpp/io/basic_ios/good</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>cpp/io/basic_ios/copyfmt</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>cpp/io/basic_ostream/tellp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>cpp/io/ios_base/sync_with_stdio</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>cpp/io/ios_base/xalloc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>cpp/io/basic_ios/exceptions</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>cpp/io/ios_base/iword</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>cpp/io/basic_ostream/operator_ltlt</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>cpp/io/basic_ios/narrow</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>cpp/io/basic_ios/operator_bool</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>cpp/io/basic_ios/operator!</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>cpp/io/basic_ofstream/close</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>cpp/io/basic_ostream/write</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>cpp/io/ios_base/unsetf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>cpp/io/ios_base/width</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>cpp/io/basic_ios/rdstate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>cpp/io/basic_ios/tie</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ofstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>cpp/io/basic_ios/move</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>cpp/io/basic_ios/eof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>cpp/io/ios_base/register_callback</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>cpp/io/ios_base/pword</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>cpp/io/basic_ostream/flush</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>cpp/io/basic_ios/set_rdbuf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>cpp/io/basic_ios/fail</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_open</name>
      <anchorfile>cpp/io/basic_ofstream/is_open</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>cpp/io/basic_ofstream/operator=</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>cpp/io/basic_ios/swap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>cpp/io/basic_ios/rdbuf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>cpp/io/basic_ios/imbue</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>cpp/io/basic_ios/bad</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>cpp/io/basic_ios/clear</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ofstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>cpp/io/basic_ostream/put</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>cpp/io/basic_ios/init</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ofstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_ofstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>cpp/io/ios_base/failure</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>cpp/error/exception/what</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ofstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>cpp/io/basic_ostream/sentry</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>cpp/io/basic_ostream/sentry</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>cpp/io/basic_ostream/sentry</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ratio_subtract</name>
    <filename>cpp/numeric/ratio/ratio_subtract</filename>
  </compound>
  <compound kind="class">
    <name>std::size_t</name>
    <filename>cpp/types/size_t</filename>
  </compound>
  <compound kind="class">
    <name>std::ctype_byname</name>
    <filename>cpp/locale/ctype_byname</filename>
    <member kind="function">
      <type>T</type>
      <name>~ctype_byname</name>
      <anchorfile>cpp/locale/ctype_byname</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ctype_byname</name>
      <anchorfile>cpp/locale/ctype_byname</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_toupper</name>
      <anchorfile>cpp/locale/ctype/toupper</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>toupper</name>
      <anchorfile>cpp/locale/ctype/toupper</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_scan_is</name>
      <anchorfile>cpp/locale/ctype/scan_is</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_tolower</name>
      <anchorfile>cpp/locale/ctype/tolower</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_narrow</name>
      <anchorfile>cpp/locale/ctype/narrow</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>cpp/locale/ctype/widen</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is</name>
      <anchorfile>cpp/locale/ctype/is</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>scan_is</name>
      <anchorfile>cpp/locale/ctype/scan_is</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tolower</name>
      <anchorfile>cpp/locale/ctype/tolower</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_is</name>
      <anchorfile>cpp/locale/ctype/is</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>cpp/locale/ctype/narrow</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ctype_byname::mask</class>
    <member kind="function">
      <type>T</type>
      <name>do_widen</name>
      <anchorfile>cpp/locale/ctype/widen</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ctype_byname::mask</name>
    <filename>cpp/locale/ctype_base</filename>
  </compound>
  <compound kind="class">
    <name>std::wcout</name>
    <filename>cpp/io/basic_ostream</filename>
  </compound>
  <compound kind="class">
    <name>std::fstream</name>
    <filename>cpp/io/basic_fstream</filename>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>cpp/io/basic_ostream/seekp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>cpp/io/basic_ios/setstate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>cpp/io/ios_base/getloc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>cpp/io/ios_base/precision</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>cpp/io/ios_base/width</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>cpp/io/ios_base/flags</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>cpp/io/basic_ios/widen</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>cpp/io/basic_istream/operator_gtgt</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>cpp/io/basic_ios/fill</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>cpp/io/ios_base/setf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>cpp/io/basic_istream/seekg</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>cpp/io/basic_fstream/open</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>cpp/io/basic_ios/good</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>cpp/io/basic_ios/copyfmt</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>cpp/io/basic_ostream/tellp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>cpp/io/ios_base/sync_with_stdio</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>cpp/io/basic_istream/gcount</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fstream</name>
      <anchorfile>cpp/io/basic_fstream/basic_fstream</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>cpp/io/basic_istream/unget</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>cpp/io/ios_base/xalloc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>cpp/io/basic_istream/read</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>cpp/io/basic_istream/getline</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>cpp/io/basic_ios/eof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>cpp/io/basic_ios/exceptions</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::fstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>cpp/io/ios_base/register_callback</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>cpp/io/basic_ostream/operator_ltlt</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::fstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>cpp/io/basic_ios/narrow</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>cpp/io/basic_ios/operator_bool</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>cpp/io/basic_ostream/write</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>cpp/io/basic_fstream/close</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>cpp/io/basic_istream/sync</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>cpp/io/basic_istream/putback</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>cpp/io/basic_istream/ignore</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>cpp/io/ios_base/unsetf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>cpp/io/basic_istream/readsome</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>cpp/io/basic_ios/rdstate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>cpp/io/basic_ios/tie</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::fstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>cpp/io/basic_ios/move</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>cpp/io/basic_istream/get</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>cpp/io/basic_ios/operator!</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>cpp/io/ios_base/pword</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>cpp/io/basic_ios/swap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>cpp/io/basic_ostream/flush</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>cpp/io/basic_istream/tellg</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>cpp/io/basic_ios/set_rdbuf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>cpp/io/basic_ios/fail</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_open</name>
      <anchorfile>cpp/io/basic_fstream/is_open</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>cpp/io/basic_istream/peek</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>cpp/io/basic_fstream/operator=</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>cpp/io/ios_base/iword</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>cpp/io/basic_ios/rdbuf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>cpp/io/basic_ios/imbue</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>cpp/io/basic_ios/bad</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>cpp/io/basic_ios/clear</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>cpp/io/basic_ostream/put</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>cpp/io/basic_ios/init</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::fstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>cpp/io/basic_istream/sentry</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>cpp/io/basic_istream/sentry</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>cpp/io/basic_istream/sentry</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::fstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::fstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>cpp/io/ios_base/failure</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>cpp/error/exception/what</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::valarray</name>
    <filename>cpp/numeric/valarray</filename>
  </compound>
  <compound kind="class">
    <name>std::ratio_greater_equal</name>
    <filename>cpp/numeric/ratio/ratio_greater_equal</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_extent</name>
    <filename>cpp/types/remove_extent</filename>
  </compound>
  <compound kind="class">
    <name>std::ratio_greater</name>
    <filename>cpp/numeric/ratio/ratio_greater</filename>
  </compound>
  <compound kind="class">
    <name>std::intptr_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::regex_iterator</name>
    <filename>cpp/regex/regex_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>cpp/regex/regex_iterator/operator_cmp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>cpp/regex/regex_iterator/operator=</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>cpp/regex/regex_iterator/operator_cmp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>cpp/regex/regex_iterator/operator*</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>regex_iterator</name>
      <anchorfile>cpp/regex/regex_iterator/regex_iterator</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>cpp/regex/regex_iterator/operator_arith</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>cpp/regex/regex_iterator/operator*</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>cpp/regex/regex_iterator/operator_arith</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::lock_guard</name>
    <filename>cpp/thread/lock_guard</filename>
    <member kind="function">
      <type>T</type>
      <name>~lock_guard</name>
      <anchorfile>cpp/thread/lock_guard/~lock_guard</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lock_guard</name>
      <anchorfile>cpp/thread/lock_guard/lock_guard</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wbuffer_convert</name>
    <filename>cpp/locale/wbuffer_convert</filename>
    <member kind="function">
      <type>T</type>
      <name>state</name>
      <anchorfile>cpp/locale/wbuffer_convert/state</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wbuffer_convert</name>
      <anchorfile>cpp/locale/wbuffer_convert/wbuffer_convert</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>cpp/locale/wbuffer_convert/rdbuf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wbuffer_convert</name>
      <anchorfile>cpp/locale/wbuffer_convert/~wbuffer_convert</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::modulus</name>
    <filename>cpp/utility/functional/modulus</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>cpp/utility/functional/modulus</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ratio_divide</name>
    <filename>cpp/numeric/ratio/ratio_divide</filename>
  </compound>
  <compound kind="class">
    <name>std::ostreambuf_iterator</name>
    <filename>cpp/iterator/ostreambuf_iterator</filename>
  </compound>
  <compound kind="class">
    <name>std::dynarray</name>
    <filename>cpp/container/dynarray</filename>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>cpp/container/dynarray/rbegin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>cpp/container/dynarray/rend</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>cpp/container/dynarray/begin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>cpp/container/dynarray/data</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>cpp/container/dynarray/at</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>cpp/container/dynarray/back</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>cpp/container/dynarray/end</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>cpp/container/dynarray/fill</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>cpp/container/dynarray/empty</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>cpp/container/dynarray/size</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>cpp/container/dynarray/end</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~dynarray</name>
      <anchorfile>cpp/container/dynarray/~dynarray</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>cpp/container/dynarray/max_size</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>cpp/container/dynarray/rend</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>cpp/container/dynarray/front</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dynarray</name>
      <anchorfile>cpp/container/dynarray/dynarray</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>cpp/container/dynarray/operator_at</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>cpp/container/dynarray/rbegin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>cpp/container/dynarray/begin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_move_constructible</name>
    <filename>cpp/types/is_move_constructible</filename>
  </compound>
  <compound kind="class">
    <name>std::vector</name>
    <filename>cpp/container/vector</filename>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>cpp/container/vector/push_back</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>cpp/container/vector/rbegin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>cpp/container/vector/erase</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>cpp/container/vector/data</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>cpp/container/vector/insert</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>cpp/container/vector/pop_back</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>cpp/container/vector/shrink_to_fit</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>cpp/container/vector/back</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>cpp/container/vector/end</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>cpp/container/vector/resize</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_back</name>
      <anchorfile>cpp/container/vector/emplace_back</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>cpp/container/vector/size</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>cpp/container/vector/begin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>cpp/container/vector/front</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~vector</name>
      <anchorfile>cpp/container/vector/~vector</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>cpp/container/vector/rbegin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>cpp/container/vector/rend</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>cpp/container/vector/assign</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>cpp/container/vector/operator=</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vector</name>
      <anchorfile>cpp/container/vector/vector</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>cpp/container/vector/reserve</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>cpp/container/vector/capacity</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>cpp/container/vector/empty</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>cpp/container/vector/end</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>cpp/container/vector/swap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>cpp/container/vector/max_size</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>cpp/container/vector/rend</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>cpp/container/vector/get_allocator</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>cpp/container/vector/clear</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>cpp/container/vector/at</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>cpp/container/vector/emplace</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>cpp/container/vector/operator_at</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>cpp/container/vector/begin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::match_results</name>
    <filename>cpp/regex/match_results</filename>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>cpp/regex/match_results/begin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>format</name>
      <anchorfile>cpp/regex/match_results/format</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~match_results</name>
      <anchorfile>cpp/regex/match_results/~match_results</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>cpp/regex/match_results/size</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>cpp/regex/match_results/swap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>position</name>
      <anchorfile>cpp/regex/match_results/position</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>prefix</name>
      <anchorfile>cpp/regex/match_results/prefix</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>cpp/regex/match_results/str</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>cpp/regex/match_results/begin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>cpp/regex/match_results/empty</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>suffix</name>
      <anchorfile>cpp/regex/match_results/suffix</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>cpp/regex/match_results/get_allocator</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>cpp/regex/match_results/end</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>match_results</name>
      <anchorfile>cpp/regex/match_results/match_results</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ready</name>
      <anchorfile>cpp/regex/match_results/ready</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>cpp/regex/match_results/end</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>cpp/regex/match_results/operator_at</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>cpp/regex/match_results/length</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>cpp/regex/match_results/max_size</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::back_insert_iterator</name>
    <filename>cpp/iterator/back_insert_iterator</filename>
  </compound>
  <compound kind="class">
    <name>std::iterator</name>
    <filename>cpp/iterator/iterator</filename>
  </compound>
  <compound kind="class">
    <name>std::int8_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::student_t_distribution</name>
    <filename>cpp/numeric/random/student_t_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>n</name>
      <anchorfile>cpp/numeric/random/student_t_distribution/n</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>cpp/numeric/random/student_t_distribution/reset</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>cpp/numeric/random/student_t_distribution/max</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>cpp/numeric/random/student_t_distribution/operator()</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>student_t_distribution</name>
      <anchorfile>cpp/numeric/random/student_t_distribution/student_t_distribution</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>cpp/numeric/random/student_t_distribution/param</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>cpp/numeric/random/student_t_distribution/min</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::mt19937_64</name>
    <filename>cpp/numeric/random/mersenne_twister_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>cpp/numeric/random/mersenne_twister_engine/discard</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mt19937_64</name>
      <anchorfile>cpp/numeric/random/mersenne_twister_engine/mersenne_twister_engine</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>cpp/numeric/random/mersenne_twister_engine/max</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>cpp/numeric/random/mersenne_twister_engine/operator()</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>cpp/numeric/random/mersenne_twister_engine/seed</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>cpp/numeric/random/mersenne_twister_engine/min</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::runtime_error</name>
    <filename>cpp/error/runtime_error</filename>
    <member kind="function">
      <type>T</type>
      <name>runtime_error</name>
      <anchorfile>cpp/error/runtime_error</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>cpp/error/exception/what</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ranlux24_base</name>
    <filename>cpp/numeric/random/subtract_with_carry_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>cpp/numeric/random/subtract_with_carry_engine/discard</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ranlux24_base</name>
      <anchorfile>cpp/numeric/random/subtract_with_carry_engine/subtract_with_carry_engine</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>cpp/numeric/random/subtract_with_carry_engine/max</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>cpp/numeric/random/subtract_with_carry_engine/operator()</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>cpp/numeric/random/subtract_with_carry_engine/seed</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>cpp/numeric/random/subtract_with_carry_engine/min</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::allocator_traits</name>
    <filename>cpp/memory/allocator_traits</filename>
    <member kind="function">
      <type>T</type>
      <name>destroy</name>
      <anchorfile>cpp/memory/allocator_traits/destroy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>select_on_container_copy_construction</name>
      <anchorfile>cpp/memory/allocator_traits/select_on_container_copy_construction</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>cpp/memory/allocator_traits/max_size</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>allocate</name>
      <anchorfile>cpp/memory/allocator_traits/allocate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>deallocate</name>
      <anchorfile>cpp/memory/allocator_traits/deallocate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>construct</name>
      <anchorfile>cpp/memory/allocator_traits/construct</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::codecvt</name>
    <filename>cpp/locale/codecvt</filename>
    <class kind="class">std::codecvt::extern_type</class>
    <member kind="function">
      <type>T</type>
      <name>out</name>
      <anchorfile>cpp/locale/codecvt/out</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_length</name>
      <anchorfile>cpp/locale/codecvt/length</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>always_noconv</name>
      <anchorfile>cpp/locale/codecvt/always_noconv</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_encoding</name>
      <anchorfile>cpp/locale/codecvt/encoding</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_in</name>
      <anchorfile>cpp/locale/codecvt/in</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unshift</name>
      <anchorfile>cpp/locale/codecvt/unshift</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt::state_type</class>
    <member kind="function">
      <type>T</type>
      <name>max_length</name>
      <anchorfile>cpp/locale/codecvt/max_length</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>encoding</name>
      <anchorfile>cpp/locale/codecvt/encoding</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>codecvt</name>
      <anchorfile>cpp/locale/codecvt/codecvt</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_unshift</name>
      <anchorfile>cpp/locale/codecvt/unshift</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_out</name>
      <anchorfile>cpp/locale/codecvt/out</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_max_length</name>
      <anchorfile>cpp/locale/codecvt/max_length</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_always_noconv</name>
      <anchorfile>cpp/locale/codecvt/always_noconv</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in</name>
      <anchorfile>cpp/locale/codecvt/in</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt::intern_type</class>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>cpp/locale/codecvt/length</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~codecvt</name>
      <anchorfile>cpp/locale/codecvt/~codecvt</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::codecvt::extern_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt::state_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt::intern_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::ratio_less_equal</name>
    <filename>cpp/numeric/ratio/ratio_less_equal</filename>
  </compound>
  <compound kind="class">
    <name>std::condition_variable_any</name>
    <filename>cpp/thread/condition_variable_any</filename>
    <member kind="function">
      <type>T</type>
      <name>condition_variable_any</name>
      <anchorfile>cpp/thread/condition_variable_any/condition_variable_any</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>notify_one</name>
      <anchorfile>cpp/thread/condition_variable_any/notify_one</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait_for</name>
      <anchorfile>cpp/thread/condition_variable_any/wait_for</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>native_handle</name>
      <anchorfile>cpp/thread/condition_variable_any/native_handle</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>notify_all</name>
      <anchorfile>cpp/thread/condition_variable_any/notify_all</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~condition_variable_any</name>
      <anchorfile>cpp/thread/condition_variable_any/~condition_variable_any</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait_until</name>
      <anchorfile>cpp/thread/condition_variable_any/wait_until</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait</name>
      <anchorfile>cpp/thread/condition_variable_any/wait</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::deca</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::extreme_value_distribution</name>
    <filename>cpp/numeric/random/extreme_value_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>cpp/numeric/random/extreme_value_distribution/max</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>b</name>
      <anchorfile>cpp/numeric/random/extreme_value_distribution/params</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>a</name>
      <anchorfile>cpp/numeric/random/extreme_value_distribution/params</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>cpp/numeric/random/extreme_value_distribution/operator()</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extreme_value_distribution</name>
      <anchorfile>cpp/numeric/random/extreme_value_distribution/extreme_value_distribution</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>cpp/numeric/random/extreme_value_distribution/param</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>cpp/numeric/random/extreme_value_distribution/min</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>cpp/numeric/random/extreme_value_distribution/reset</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::cout</name>
    <filename>cpp/io/basic_ostream</filename>
  </compound>
  <compound kind="class">
    <name>std::decay</name>
    <filename>cpp/types/decay</filename>
  </compound>
  <compound kind="class">
    <name>std::is_trivially_move_assignable</name>
    <filename>cpp/types/is_move_assignable</filename>
  </compound>
  <compound kind="class">
    <name>std::adopt_lock_t</name>
    <filename>cpp/thread/lock_tag_t</filename>
  </compound>
  <compound kind="class">
    <name>std::wcerr</name>
    <filename>cpp/io/basic_ostream</filename>
  </compound>
  <compound kind="class">
    <name>std::lognormal_distribution</name>
    <filename>cpp/numeric/random/lognormal_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>cpp/numeric/random/lognormal_distribution/max</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>cpp/numeric/random/lognormal_distribution/reset</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lognormal_distribution</name>
      <anchorfile>cpp/numeric/random/lognormal_distribution/lognormal_distribution</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>m</name>
      <anchorfile>cpp/numeric/random/lognormal_distribution/params</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>cpp/numeric/random/lognormal_distribution/operator()</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>s</name>
      <anchorfile>cpp/numeric/random/lognormal_distribution/params</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>cpp/numeric/random/lognormal_distribution/param</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>cpp/numeric/random/lognormal_distribution/min</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wclog</name>
    <filename>cpp/io/basic_ostream</filename>
  </compound>
  <compound kind="class">
    <name>std::char_traits</name>
    <filename>cpp/string/char_traits</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>cpp/string/char_traits/assign</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>not_eof</name>
      <anchorfile>cpp/string/char_traits/not_eof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_int_type</name>
      <anchorfile>cpp/string/char_traits/to_int_type</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_char_type</name>
      <anchorfile>cpp/string/char_traits/to_char_type</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eq</name>
      <anchorfile>cpp/string/char_traits/cmp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>cpp/string/char_traits/copy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>cpp/string/char_traits/length</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lt</name>
      <anchorfile>cpp/string/char_traits/cmp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>cpp/string/char_traits/eof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>cpp/string/char_traits/find</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>cpp/string/char_traits/move</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>cpp/string/char_traits/compare</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eq_int_type</name>
      <anchorfile>cpp/string/char_traits/eq_int_type</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::remove_reference</name>
    <filename>cpp/types/remove_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::num_get</name>
    <filename>cpp/locale/num_get</filename>
    <member kind="function">
      <type>T</type>
      <name>do_get</name>
      <anchorfile>cpp/locale/num_get/get</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::num_get::char_type</class>
    <class kind="class">std::num_get::iter_type</class>
    <member kind="function">
      <type>T</type>
      <name>num_get</name>
      <anchorfile>cpp/locale/num_get/num_get</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~num_get</name>
      <anchorfile>cpp/locale/num_get/~num_get</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>cpp/locale/num_get/get</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::num_get::char_type</name>
    <filename>cpp/locale/num_get</filename>
  </compound>
  <compound kind="class">
    <name>std::num_get::iter_type</name>
    <filename>cpp/locale/num_get</filename>
  </compound>
  <compound kind="class">
    <name>std::is_pointer</name>
    <filename>cpp/types/is_pointer</filename>
  </compound>
  <compound kind="class">
    <name>std::multiset</name>
    <filename>cpp/container/multiset</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>cpp/container/multiset/begin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>cpp/container/multiset/erase</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>cpp/container/multiset/insert</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>cpp/container/multiset/swap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>cpp/container/multiset/end</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>cpp/container/multiset/emplace_hint</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_comp</name>
      <anchorfile>cpp/container/multiset/key_comp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>cpp/container/multiset/begin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>cpp/container/multiset/count</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>cpp/container/multiset/find</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>cpp/container/multiset/rbegin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>multiset</name>
      <anchorfile>cpp/container/multiset/multiset</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>upper_bound</name>
      <anchorfile>cpp/container/multiset/upper_bound</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>cpp/container/multiset/rbegin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>cpp/container/multiset/rend</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>cpp/container/multiset/size</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>cpp/container/multiset/operator=</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~multiset</name>
      <anchorfile>cpp/container/multiset/~multiset</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_comp</name>
      <anchorfile>cpp/container/multiset/value_comp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>cpp/container/multiset/empty</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lower_bound</name>
      <anchorfile>cpp/container/multiset/lower_bound</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>cpp/container/multiset/get_allocator</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>cpp/container/multiset/max_size</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>cpp/container/multiset/rend</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>cpp/container/multiset/end</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>cpp/container/multiset/clear</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>cpp/container/multiset/equal_range</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>cpp/container/multiset/emplace</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::weak_ptr</name>
    <filename>cpp/memory/weak_ptr</filename>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>cpp/memory/weak_ptr/operator=</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>cpp/memory/weak_ptr/swap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>weak_ptr</name>
      <anchorfile>cpp/memory/weak_ptr/weak_ptr</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>owner_before</name>
      <anchorfile>cpp/memory/weak_ptr/owner_before</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~weak_ptr</name>
      <anchorfile>cpp/memory/weak_ptr/~weak_ptr</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>use_count</name>
      <anchorfile>cpp/memory/weak_ptr/use_count</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>expired</name>
      <anchorfile>cpp/memory/weak_ptr/expired</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lock</name>
      <anchorfile>cpp/memory/weak_ptr/lock</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>cpp/memory/weak_ptr/reset</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bidirectional_iterator_tag</name>
    <filename>cpp/iterator/iterator_tags</filename>
  </compound>
  <compound kind="class">
    <name>std::wstring_convert</name>
    <filename>cpp/locale/wstring_convert</filename>
    <member kind="function">
      <type>T</type>
      <name>converted</name>
      <anchorfile>cpp/locale/wstring_convert/converted</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_bytes</name>
      <anchorfile>cpp/locale/wstring_convert/to_bytes</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wstring_convert</name>
      <anchorfile>cpp/locale/wstring_convert/~wstring_convert</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>state</name>
      <anchorfile>cpp/locale/wstring_convert/state</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wstring_convert</name>
      <anchorfile>cpp/locale/wstring_convert/wstring_convert</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>from_bytes</name>
      <anchorfile>cpp/locale/wstring_convert/from_bytes</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::greater_equal</name>
    <filename>cpp/utility/functional/greater_equal</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>cpp/utility/functional/greater_equal</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::is_trivially_constructible</name>
    <filename>cpp/types/is_constructible</filename>
  </compound>
  <compound kind="class">
    <name>std::string</name>
    <filename>cpp/string/basic_string</filename>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>cpp/string/basic_string/push_back</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>cpp/string/basic_string/shrink_to_fit</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>cpp/string/basic_string/rfind</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>cpp/string/basic_string/begin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>cpp/string/basic_string/erase</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>append</name>
      <anchorfile>cpp/string/basic_string/append</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>cpp/string/basic_string/data</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>cpp/string/basic_string/insert</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>cpp/string/basic_string/assign</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>cpp/string/basic_string/find_first_not_of</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>cpp/string/basic_string/back</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>cpp/string/basic_string/end</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>cpp/string/basic_string/resize</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>cpp/string/basic_string/copy</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>cpp/string/basic_string/find_last_of</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>cpp/string/basic_string/pop_back</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace</name>
      <anchorfile>cpp/string/basic_string/replace</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>cpp/string/basic_string/front</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>cpp/string/basic_string/substr</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>cpp/string/basic_string/find</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>cpp/string/basic_string/compare</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>cpp/string/basic_string/rbegin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>cpp/string/basic_string/begin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>cpp/string/basic_string/find_first_of</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>cpp/string/basic_string/rbegin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>cpp/string/basic_string/rend</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>cpp/string/basic_string/size</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>cpp/string/basic_string/operator=</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>cpp/string/basic_string/find_last_not_of</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>cpp/string/basic_string/reserve</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>cpp/string/basic_string/capacity</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c_str</name>
      <anchorfile>cpp/string/basic_string/c_str</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>cpp/string/basic_string/empty</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>cpp/string/basic_string/end</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>string</name>
      <anchorfile>cpp/string/basic_string/basic_string</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>cpp/string/basic_string/max_size</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>cpp/string/basic_string/rend</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>cpp/string/basic_string/get_allocator</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>cpp/string/basic_string/clear</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>cpp/string/basic_string/at</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>cpp/string/basic_string/swap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>cpp/string/basic_string/operator_at</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>cpp/string/basic_string/size</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::discrete_distribution</name>
    <filename>cpp/numeric/random/discrete_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>probabilities</name>
      <anchorfile>cpp/numeric/random/discrete_distribution/probabilities</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>cpp/numeric/random/discrete_distribution/reset</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>cpp/numeric/random/discrete_distribution/operator()</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>discrete_distribution</name>
      <anchorfile>cpp/numeric/random/discrete_distribution/discrete_distribution</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>cpp/numeric/random/discrete_distribution/max</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>cpp/numeric/random/discrete_distribution/param</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>cpp/numeric/random/discrete_distribution/min</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wostream</name>
    <filename>cpp/io/basic_ostream</filename>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>cpp/io/basic_ostream/seekp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>cpp/io/basic_ios/setstate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>cpp/io/ios_base/getloc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>cpp/io/ios_base/precision</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>cpp/io/ios_base/flags</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>cpp/io/basic_ios/widen</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>cpp/io/basic_ios/fill</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>cpp/io/ios_base/setf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>cpp/io/basic_ostream/tellp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wostream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>cpp/io/basic_ios/operator_bool</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>cpp/io/basic_ios/copyfmt</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wostream</name>
      <anchorfile>cpp/io/basic_ostream/~basic_ostream</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>cpp/io/ios_base/sync_with_stdio</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wostream</name>
      <anchorfile>cpp/io/basic_ostream/basic_ostream</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>cpp/io/ios_base/xalloc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>cpp/io/basic_ios/exceptions</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>cpp/io/ios_base/iword</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>cpp/io/basic_ios/rdbuf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>cpp/io/basic_ostream/operator_ltlt</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>cpp/io/basic_ios/narrow</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>cpp/io/basic_ios/good</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>cpp/io/basic_ios/operator!</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>cpp/io/basic_ostream/write</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>cpp/io/ios_base/unsetf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>cpp/io/ios_base/width</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>cpp/io/basic_ios/rdstate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>cpp/io/basic_ios/tie</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wostream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>cpp/io/basic_ios/move</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>cpp/io/basic_ios/eof</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>cpp/io/ios_base/register_callback</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>cpp/io/ios_base/pword</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>cpp/io/basic_ios/swap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>cpp/io/basic_ostream/flush</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>cpp/io/basic_ios/set_rdbuf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>cpp/io/basic_ios/fail</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wostream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>cpp/io/basic_ios/imbue</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>cpp/io/basic_ios/bad</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>cpp/io/basic_ios/clear</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>cpp/io/basic_ostream/put</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>cpp/io/basic_ios/init</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wostream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::wostream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>cpp/io/ios_base/failure</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>cpp/error/exception/what</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wostream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>cpp/io/basic_ostream/sentry</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>cpp/io/basic_ostream/sentry</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>cpp/io/basic_ostream/sentry</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::is_polymorphic</name>
    <filename>cpp/types/is_polymorphic</filename>
  </compound>
  <compound kind="class">
    <name>std::reverse_iterator</name>
    <filename>cpp/iterator/reverse_iterator</filename>
  </compound>
  <compound kind="class">
    <name>std::bad_array_new_length</name>
    <filename>cpp/memory/new/bad_array_new_length</filename>
    <member kind="function">
      <type>T</type>
      <name>bad_array_new_length</name>
      <anchorfile>cpp/memory/new/bad_array_new_length/bad_array_new_length</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>cpp/memory/new/bad_alloc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::condition_variable</name>
    <filename>cpp/thread/condition_variable</filename>
    <member kind="function">
      <type>T</type>
      <name>wait</name>
      <anchorfile>cpp/thread/condition_variable/wait</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>notify_one</name>
      <anchorfile>cpp/thread/condition_variable/notify_one</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait_for</name>
      <anchorfile>cpp/thread/condition_variable/wait_for</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>notify_all</name>
      <anchorfile>cpp/thread/condition_variable/notify_all</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>native_handle</name>
      <anchorfile>cpp/thread/condition_variable/native_handle</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait_until</name>
      <anchorfile>cpp/thread/condition_variable/wait_until</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>condition_variable</name>
      <anchorfile>cpp/thread/condition_variable/condition_variable</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~condition_variable</name>
      <anchorfile>cpp/thread/condition_variable/~condition_variable</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ranlux48</name>
    <filename>cpp/numeric/random/discard_block_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>cpp/numeric/random/discard_block_engine/discard</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>cpp/numeric/random/discard_block_engine/operator()</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ranlux48</name>
      <anchorfile>cpp/numeric/random/discard_block_engine/discard_block_engine</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>base</name>
      <anchorfile>cpp/numeric/random/discard_block_engine/base</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>cpp/numeric/random/discard_block_engine/seed</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>cpp/numeric/random/discard_block_engine/max</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>cpp/numeric/random/discard_block_engine/min</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::unexpected_handler</name>
    <filename>cpp/error/unexpected_handler</filename>
  </compound>
  <compound kind="class">
    <name>std::piecewise_constant_distribution</name>
    <filename>cpp/numeric/random/piecewise_constant_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>densities</name>
      <anchorfile>cpp/numeric/random/piecewise_constant_distribution/params</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>cpp/numeric/random/piecewise_constant_distribution/max</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>intervals</name>
      <anchorfile>cpp/numeric/random/piecewise_constant_distribution/params</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>cpp/numeric/random/piecewise_constant_distribution/reset</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>piecewise_constant_distribution</name>
      <anchorfile>cpp/numeric/random/piecewise_constant_distribution/piecewise_constant_distribution</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>cpp/numeric/random/piecewise_constant_distribution/operator()</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>cpp/numeric/random/piecewise_constant_distribution/param</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>cpp/numeric/random/piecewise_constant_distribution/min</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::codecvt_base</name>
    <filename>cpp/locale/codecvt_base</filename>
  </compound>
  <compound kind="class">
    <name>std::set</name>
    <filename>cpp/container/set</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>cpp/container/set/begin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>cpp/container/set/erase</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>cpp/container/set/insert</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~set</name>
      <anchorfile>cpp/container/set/~set</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>cpp/container/set/rbegin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>cpp/container/set/end</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>cpp/container/set/emplace_hint</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_comp</name>
      <anchorfile>cpp/container/set/key_comp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>cpp/container/set/count</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>cpp/container/set/find</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>cpp/container/set/rbegin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>cpp/container/set/begin</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>upper_bound</name>
      <anchorfile>cpp/container/set/upper_bound</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>cpp/container/set/swap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>cpp/container/set/rend</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>cpp/container/set/size</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set</name>
      <anchorfile>cpp/container/set/set</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>cpp/container/set/operator=</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_comp</name>
      <anchorfile>cpp/container/set/value_comp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>cpp/container/set/empty</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lower_bound</name>
      <anchorfile>cpp/container/set/lower_bound</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>cpp/container/set/get_allocator</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>cpp/container/set/max_size</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>cpp/container/set/rend</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>cpp/container/set/end</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>cpp/container/set/clear</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>cpp/container/set/equal_range</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>cpp/container/set/emplace</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::forward_iterator_tag</name>
    <filename>cpp/iterator/iterator_tags</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_byname</name>
    <filename>cpp/locale/codecvt_byname</filename>
    <class kind="class">std::codecvt_byname::extern_type</class>
    <member kind="function">
      <type>T</type>
      <name>out</name>
      <anchorfile>cpp/locale/codecvt/out</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_length</name>
      <anchorfile>cpp/locale/codecvt/length</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_unshift</name>
      <anchorfile>cpp/locale/codecvt/unshift</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_encoding</name>
      <anchorfile>cpp/locale/codecvt/encoding</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_in</name>
      <anchorfile>cpp/locale/codecvt/in</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unshift</name>
      <anchorfile>cpp/locale/codecvt/unshift</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_length</name>
      <anchorfile>cpp/locale/codecvt/max_length</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_byname::state_type</class>
    <member kind="function">
      <type>T</type>
      <name>encoding</name>
      <anchorfile>cpp/locale/codecvt/encoding</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>always_noconv</name>
      <anchorfile>cpp/locale/codecvt/always_noconv</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_out</name>
      <anchorfile>cpp/locale/codecvt/out</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>codecvt_byname</name>
      <anchorfile>cpp/locale/codecvt_byname</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_max_length</name>
      <anchorfile>cpp/locale/codecvt/max_length</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_always_noconv</name>
      <anchorfile>cpp/locale/codecvt/always_noconv</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in</name>
      <anchorfile>cpp/locale/codecvt/in</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_byname::intern_type</class>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>cpp/locale/codecvt/length</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~codecvt_byname</name>
      <anchorfile>cpp/locale/codecvt_byname</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::codecvt_byname::extern_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_byname::state_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_byname::intern_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::pointer_safety</name>
    <filename>cpp/memory/gc/pointer_safety</filename>
  </compound>
  <compound kind="class">
    <name>std::uint_least64_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::placeholders</name>
    <filename>cpp/utility/functional/placeholders</filename>
  </compound>
  <compound kind="class">
    <name>std::nothrow_t</name>
    <filename>cpp/memory/new/nothrow_t</filename>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_copy_assignable</name>
    <filename>cpp/types/is_copy_assignable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_same</name>
    <filename>cpp/types/is_same</filename>
  </compound>
  <compound kind="class">
    <name>std::unique_lock</name>
    <filename>cpp/thread/unique_lock</filename>
    <member kind="function">
      <type>T</type>
      <name>mutex</name>
      <anchorfile>cpp/thread/unique_lock/mutex</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>cpp/thread/unique_lock/swap</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>owns_lock</name>
      <anchorfile>cpp/thread/unique_lock/owns_lock</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_for</name>
      <anchorfile>cpp/thread/unique_lock/try_lock_for</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>release</name>
      <anchorfile>cpp/thread/unique_lock/release</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lock</name>
      <anchorfile>cpp/thread/unique_lock/lock</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>cpp/thread/unique_lock/operator_bool</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~unique_lock</name>
      <anchorfile>cpp/thread/unique_lock/~unique_lock</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unlock</name>
      <anchorfile>cpp/thread/unique_lock/unlock</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>cpp/thread/unique_lock/operator=</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_until</name>
      <anchorfile>cpp/thread/unique_lock/try_lock_until</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock</name>
      <anchorfile>cpp/thread/unique_lock/try_lock</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unique_lock</name>
      <anchorfile>cpp/thread/unique_lock/unique_lock</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ostringstream</name>
    <filename>cpp/io/basic_ostringstream</filename>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>cpp/io/basic_ostream/seekp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>cpp/io/basic_ios/setstate</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>cpp/io/ios_base/getloc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>cpp/io/ios_base/precision</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>cpp/io/ios_base/flags</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>cpp/io/basic_ostringstream/str</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>cpp/io/basic_ios/widen</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>cpp/io/basic_ios/fill</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>cpp/io/ios_base/setf</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ostringstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>cpp/io/basic_ios/good</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>cpp/io/basic_ios/copyfmt</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>cpp/io/basic_ostream/tellp</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>cpp/io/ios_base/sync_with_stdio</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>cpp/io/ios_base/xalloc</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>cpp/io/basic_ios/exceptions</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>cpp/io/ios_base/iword</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>cpp/io/basic_ostream/operator_ltlt</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>cpp/io/basic_ios/narrow</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
    